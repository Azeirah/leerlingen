{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Gro",
				"GroepEditor"
			],
			[
				"plu",
				"plural"
			],
			[
				"box-",
				"box-shadow"
			],
			[
				"b-ra",
				"border-radius"
			],
			[
				"curr",
				"currentBoard"
			],
			[
				"font-",
				"font-family"
			],
			[
				"highli",
				"highlightSyntax"
			],
			[
				"high",
				"highlightBlock"
			],
			[
				"synta",
				"syntaxHighlight"
			],
			[
				"inp",
				"includePears"
			],
			[
				"nese",
				"nestedArguments"
			],
			[
				"define",
				"defineDataMethod"
			],
			[
				"top",
				"topTemplate"
			],
			[
				"bottom",
				"bottomTemplate"
			],
			[
				"middl",
				"middleTemplate"
			],
			[
				"function",
				"functionality"
			],
			[
				"pak",
				"packageName"
			],
			[
				"Status",
				"STATUSSES"
			],
			[
				"user",
				"userId"
			],
			[
				"ad",
				"addFriendSearch"
			],
			[
				"backgro",
				"background-color"
			],
			[
				"backc",
				"background-color"
			],
			[
				"even",
				"eventPanel"
			],
			[
				"getm",
				"getMinutes()"
			],
			[
				"newE",
				"newEventForm"
			],
			[
				"date",
				"datepair"
			],
			[
				"organ",
				"organizerId"
			],
			[
				"g",
				"gaussian"
			],
			[
				"sta",
				"standard_deviation"
			],
			[
				"temp",
				"tempArray"
			],
			[
				"tem",
				"tempArray"
			],
			[
				"idx",
				"index"
			],
			[
				"fu",
				"function"
			],
			[
				"vers",
				"versterker"
			],
			[
				"Jumpt",
				"JumpToBase"
			],
			[
				"pop",
				"populate_randomly"
			],
			[
				"calc_",
				"calc_fitness"
			],
			[
				"to",
				"toString"
			],
			[
				"new",
				"newPhrase"
			],
			[
				"fitne",
				"fitness_percentage"
			],
			[
				"fi",
				"fitness_percentage"
			],
			[
				"calc_f",
				"calc_fitness_percentage"
			],
			[
				"total",
				"totalFitness"
			],
			[
				"cal",
				"calc_fitness_percentage"
			],
			[
				"mutate",
				"mutateChance"
			],
			[
				"gene",
				"generate_gene"
			],
			[
				"gen",
				"generate_gene"
			],
			[
				"vertical",
				"vertical-align"
			],
			[
				"email",
				"emailTemplates"
			],
			[
				"changeP",
				"changePasswordForm"
			],
			[
				"change",
				"changePassword"
			],
			[
				"chan",
				"changePassword"
			],
			[
				"verify",
				"verifyEmail"
			],
			[
				"best",
				"beststring"
			],
			[
				"reset",
				"resetPasswordForm"
			],
			[
				"input",
				"input	input - submit"
			],
			[
				"sub",
				"sub	Tag"
			],
			[
				"u",
				"users"
			],
			[
				"l",
				"logout"
			],
			[
				"lendee",
				"lendee_name"
			],
			[
				"item",
				"item_name"
			],
			[
				"list",
				"list_item"
			],
			[
				"focu",
				"focusText"
			],
			[
				"ite",
				"item_to_add"
			],
			[
				"for",
				"for	for (…) {…}"
			],
			[
				"cat",
				"categories"
			],
			[
				"add",
				"adding_category"
			],
			[
				"addin",
				"adding_category"
			]
		]
	},
	"buffers":
	[
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 528,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Combocoputer/Documents/martijnbrekelmans/trees/trees.js",
			"settings":
			{
				"buffer_size": 6957,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nPackage Control:\n---------------\n\n  Version 3.0 Release Notes\n  \n  \n  **** Windows Sublime Text 3 Users ****\n  \n  Due to a bug in Package Control 2.0, Windows ST3 users will need to open the\n  Sublime Text console (ctrl+`) and execute the following Python to properly\n  upgrade. All other users may ignore this part of the message.\n  \n  Make sure NOT to copy the leading two spaces, or an \"unexpected indent\" error\n  will occur.\n  \n  import urllib.request,os; pr='Preferences.sublime-settings'; ip='ignored_packages'; n='Package Control'; s=sublime.load_settings(pr); ig=s.get(ip); ig.append(n); s.set(ip,ig); sublime.save_settings('Preferences.sublime-settings'); pf=n+'.sublime-package'; urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler())); by=urllib.request.urlopen('https://packagecontrol.io/'+pf.replace(' ','%20')).read(); open(os.path.join(sublime.installed_packages_path(),pf),'wb').write(by); ig.remove(n); s.set(ip,ig); sublime.save_settings(pr); print('Package Control: 3.0.0 upgrade successful!')\n  \n  ********\n  \n  \n  Package Control 3.0 adds a bunch of polish, improving the Sublime Text\n  experience for users and package developers:\n  \n   - improved upgrades of themes, color schemes and syntaxes\n   - dependency support\n   - SSL for Linux\n   - new secondary Windows HTTP backend\n   - patches for Python in Sublime Text 2 on Windows\n   - commands to easily remove channels and repositories\n   - an events API for packages\n   - improved documentation\n  \n  \n  As of July 2014, I now work for myself. This has allowed me to spend more time\n  working on open source software, including Package Control. If you appreciate\n  the work I've done, please consider a small donation. If even 5% of regular\n  users donated the price of a coffee or beer, that would cover quite a bit of\n  my development time! See https://packagecontrol.io/about for options.\n  \n  \n  Some recent Package Control stats:\n  \n   - every weekday over 1M JSON requests hit the channel server\n   - in December, the channel server will transmit 4TB+ of compressed JSON\n   - users have installed, upgraded or removed 85M+ packages since late 2011\n  \n  \n  Read more about the release at:\n  \n  https://packagecontrol.io/news#2014-12-23-Package_Control_30_Released\n  \n",
			"settings":
			{
				"buffer_size": 2331,
				"line_ending": "Windows",
				"name": "Package Control Messages",
				"scratch": true
			}
		},
		{
			"contents": "/*\n * Medium.js\n *\n * Copyright 2013-2014, Jacob Kelley - http://jakiestfu.com/\n * Released under the MIT Licence\n * http://opensource.org/licenses/MIT\n *\n * Github:    http://github.com/jakiestfu/Medium.js/\n * Version: master\n */\n\n(function (w, d) {\n\n    'use strict';\n\n    var Medium = (function () {\n        //two modes, wild (native) or domesticated (rangy + undo.js)\n        var rangy = w['rangy'] || null;\n        var undo = w['Undo'] || null;\n        var wild = (!rangy || !undo);\n        var domesticated = (!wild);\n        var key = w.Key = {\n            'backspace': 8,\n            'tab': 9,\n            'enter': 13,\n            'shift': 16,\n            'ctrl': 17,\n            'alt': 18,\n            'pause': 19,\n            'capsLock': 20,\n            'escape': 27,\n            'pageUp': 33,\n            'pageDown': 34,\n            'end': 35,\n            'home': 36,\n            'leftArrow': 37,\n            'upArrow': 38,\n            'rightArrow': 39,\n            'downArrow': 40,\n            'insert': 45,\n            'delete': 46,\n            '0': 48,\n            '1': 49,\n            '2': 50,\n            '3': 51,\n            '4': 52,\n            '5': 53,\n            '6': 54,\n            '7': 55,\n            '8': 56,\n            '9': 57,\n            'a': 65,\n            'b': 66,\n            'c': 67,\n            'd': 68,\n            'e': 69,\n            'f': 70,\n            'g': 71,\n            'h': 72,\n            'i': 73,\n            'j': 74,\n            'k': 75,\n            'l': 76,\n            'm': 77,\n            'n': 78,\n            'o': 79,\n            'p': 80,\n            'q': 81,\n            'r': 82,\n            's': 83,\n            't': 84,\n            'u': 85,\n            'v': 86,\n            'w': 87,\n            'x': 88,\n            'y': 89,\n            'z': 90,\n            'leftWindow': 91,\n            'rightWindowKey': 92,\n            'select': 93,\n            'numpad0': 96,\n            'numpad1': 97,\n            'numpad2': 98,\n            'numpad3': 99,\n            'numpad4': 100,\n            'numpad5': 101,\n            'numpad6': 102,\n            'numpad7': 103,\n            'numpad8': 104,\n            'numpad9': 105,\n            'multiply': 106,\n            'add': 107,\n            'subtract': 109,\n            'decimalPoint': 110,\n            'divide': 111,\n            'f1': 112,\n            'f2': 113,\n            'f3': 114,\n            'f4': 115,\n            'f5': 116,\n            'f6': 117,\n            'f7': 118,\n            'f8': 119,\n            'f9': 120,\n            'f10': 121,\n            'f11': 122,\n            'f12': 123,\n            'numLock': 144,\n            'scrollLock': 145,\n            'semiColon': 186,\n            'equalSign': 187,\n            'comma': 188,\n            'dash': 189,\n            'period': 190,\n            'forwardSlash': 191,\n            'graveAccent': 192,\n            'openBracket': 219,\n            'backSlash': 220,\n            'closeBraket': 221,\n            'singleQuote': 222\n        };\n\n        /**\n        * Medium.js - Taking control of content editable\n        * @constructor\n        * @param {Object} [userSettings] user options\n        */\n        var Medium = function (userSettings) {\n            var medium        = this;\n            var action        = new Medium.Action();\n            var cache         = new Medium.Cache();\n            var cursor        = new Medium.Cursor();\n            var selection = new Medium.Selection();\n            var intercept = {\n                focus: function (e) {\n                    e = e || w.event;\n                    Medium.activeElement = el;\n                    medium.placeholders();\n                },\n                blur: function (e) {\n                    e = e || w.event;\n                    if (Medium.activeElement === el) {\n                        Medium.activeElement = null;\n                    }\n                    medium.placeholders();\n                },\n                down: function (e) {\n                    e = e || w.event;\n\n                    var keepEvent = true;\n\n                    //in Chrome it sends out this event before every regular event, not sure why\n                    if (e.keyCode === 229) return;\n\n                    utils.isCommand(settings, e, function () {\n                        cache.cmd = true;\n                    }, function () {\n                        cache.cmd = false;\n                    });\n\n                    utils.isShift(e, function () {\n                        cache.shift = true;\n                    }, function () {\n                        cache.shift = false;\n                    });\n\n                    utils.isModifier(settings, e, function (cmd) {\n                        if (cache.cmd) {\n\n                            if (( (settings.mode === Medium.inlineMode) || (settings.mode === Medium.partialMode) ) && cmd !== \"paste\") {\n                                utils.preventDefaultEvent(e);\n                                return;\n                            }\n\n                            var cmdType = typeof cmd;\n                            var fn = null;\n                            if (cmdType === \"function\") {\n                                fn = cmd;\n                            } else {\n                                fn = intercept.command[cmd];\n                            }\n\n                            keepEvent = fn.call(medium, e);\n\n                            if (keepEvent === false) {\n                                utils.preventDefaultEvent(e);\n                                utils.stopPropagation(e);\n                            }\n                        }\n                    });\n\n                    if (settings.maxLength !== -1) {\n                        var len = utils.text().length,\n                                hasSelection = false,\n                                selection = w.getSelection();\n\n                        if (selection) {\n                            hasSelection = !selection.isCollapsed;\n                        }\n\n                        if (len >= settings.maxLength && !utils.isSpecial(e) && !utils.isNavigational(e) && !hasSelection) {\n                            settings.maxLengthReached(settings.element)\n                            return utils.preventDefaultEvent(e);\n                        }\n                    }\n\n                    switch (e.keyCode) {\n                        case key['enter']:\n                            intercept.enterKey(e);\n                            break;\n                        case key['backspace']:\n                        case key['delete']:\n                            intercept.backspaceOrDeleteKey(e);\n                            break;\n                    }\n\n                    return keepEvent;\n                },\n                up: function (e) {\n                    e = e || w.event;\n                    utils.isCommand(settings, e, function () {\n                        cache.cmd = false;\n                    }, function () {\n                        cache.cmd = true;\n                    });\n                    medium.clean();\n                    medium.placeholders();\n\n                    //here we have a key context, so if you need to create your own object within a specific context it is doable\n                    var keyContext;\n                    if (\n                        settings.keyContext !== null\n                        && ( keyContext = settings.keyContext[e.keyCode] )\n                    ) {\n                        var el = cursor.parent();\n\n                        if (el) {\n                            keyContext.call(medium, e, el);\n                        }\n                    }\n\n                    action.preserveElementFocus();\n                },\n                command: {\n                    bold: function (e) {\n                        utils.preventDefaultEvent(e);\n                        (new Medium.Element(medium, 'bold'))\n                        .setClean(false)\n                        .invoke(settings.beforeInvokeElement);\n                    },\n                    underline: function (e) {\n                        utils.preventDefaultEvent(e);\n                        (new Medium.Element(medium, 'underline'))\n                        .setClean(false)\n                        .invoke(settings.beforeInvokeElement);\n                    },\n                    italicize: function (e) {\n                        utils.preventDefaultEvent(e);\n                        (new Medium.Element(medium, 'italic'))\n                        .setClean(false)\n                        .invoke(settings.beforeInvokeElement);\n                    },\n                    quote: function (e) {\n                    },\n                    paste: function (e) {\n                        medium.makeUndoable();\n                        if (settings.pasteAsText) {\n                            var sel = utils.selection.saveSelection();\n                            utils.pasteHook(function (text) {\n                                utils.selection.restoreSelection(sel);\n\n                                text = text.replace(/\\n/g, '<br>');\n\n                                (new Medium.Html(medium, text))\n                                .setClean(false)\n                                .insert(settings.beforeInsertHtml, true);\n\n                                medium.clean();\n                                medium.placeholders();\n                            });\n                        } else {\n                            medium.clean();\n                            medium.placeholders();\n                        }\n                    }\n                },\n                enterKey: function (e) {\n                    if( settings.mode === Medium.inlineMode || settings.mode === Medium.inlineRichMode ){\n                        return utils.preventDefaultEvent(e);\n                    }\n\n                    if (cache.shift) {\n                        if (settings.tags['break']) {\n                            utils.preventDefaultEvent(e);\n                            medium.addTag(settings.tags['break'], true);\n                            return false;\n                        }\n\n                    } else {\n\n                        var focusedElement = utils.atCaret(medium) || {},\n                                children = el.children,\n                                lastChild = focusedElement === el.lastChild ? el.lastChild : null,\n                                makeHR,\n                                secondToLast,\n                                paragraph;\n\n                        if (\n                            lastChild\n                            && lastChild !== el.firstChild\n                            && settings.autoHR\n                            && settings.mode !== 'partial'\n                            && settings.tags.horizontalRule\n                        ) {\n\n                            utils.preventDefaultEvent(e);\n\n                            makeHR =\n                                utils.text(lastChild) === \"\"\n                            && lastChild.nodeName.toLowerCase() === settings.tags.paragraph;\n\n                            if (makeHR && children.length >= 2) {\n                                secondToLast = children[ children.length - 2 ];\n\n                                if (secondToLast.nodeName.toLowerCase() === settings.tags.horizontalRule) {\n                                    makeHR = false;\n                                }\n                            }\n\n                            if (makeHR) {\n                                medium.addTag(settings.tags.horizontalRule, false, true, focusedElement);\n                                focusedElement = focusedElement.nextSibling;\n                            }\n\n                            if ((paragraph = medium.addTag(settings.tags.paragraph, true, null, focusedElement)) !== null) {\n                                paragraph.innerHTML = '';\n                                cursor.set(medium, 0, paragraph);\n                            }\n                        }\n                    }\n\n                    return true;\n                },\n                backspaceOrDeleteKey: function (e) {\n                    if (settings.onBackspaceOrDelete !== undefined) {\n                        var result = settings.onBackspaceOrDelete.call(medium, e, el);\n\n                        if (result) {\n                            return;\n                        }\n                    }\n\n                    if (el.lastChild === null) return;\n\n                    var lastChild = el.lastChild,\n                            beforeLastChild = lastChild.previousSibling;\n\n                    if (\n                        lastChild\n                        && settings.tags.horizontalRule\n                        && lastChild.nodeName.toLocaleLowerCase() === settings.tags.horizontalRule\n                    ) {\n                        el.removeChild(lastChild);\n                    } else if (\n                        lastChild\n                        && beforeLastChild\n                        && utils.text(lastChild).length < 1\n\n                        && beforeLastChild.nodeName.toLowerCase() === settings.tags.horizontalRule\n                        && lastChild.nodeName.toLowerCase() === settings.tags.paragraph\n                    ) {\n                        el.removeChild(lastChild);\n                        el.removeChild(beforeLastChild);\n                    }\n                }\n            };\n            var defaultSettings = {\n                element: null,\n                modifier: 'auto',\n                placeholder: \"\",\n                autofocus: false,\n                autoHR: true,\n                mode: Medium.richMode,\n                maxLength: -1,\n                modifiers: {\n                    'b': 'bold',\n                    'i': 'italicize',\n                    'u': 'underline',\n                    'v': 'paste'\n                },\n                tags: {\n                    'break': 'br',\n                    'horizontalRule': 'hr',\n                    'paragraph': 'p',\n                    'outerLevel': ['pre', 'blockquote', 'figure'],\n                    'innerLevel': ['a', 'b', 'u', 'i', 'img', 'strong']\n                },\n                cssClasses: {\n                    editor: 'Medium',\n                    pasteHook: 'Medium-paste-hook',\n                    placeholder: 'Medium-placeholder',\n                    clear: 'Medium-clear'\n                },\n                attributes: {\n                    remove: ['style', 'class']\n                },\n                pasteAsText: true,\n                beforeInvokeElement: function () {\n                    //this = Medium.Element\n                },\n                beforeInsertHtml: function () {\n                    //this = Medium.Html\n                },\n                maxLengthReached: function (element) {\n                    //element\n                },\n                beforeAddTag: function (tag, shouldFocus, isEditable, afterElement) {\n                },\n                keyContext: null,\n                pasteEventHandler: function(e) {\n                    e = e || w.event;\n                    medium.makeUndoable();\n                    var length = medium.value().length,\n                            totalLength;\n\n                    if (settings.pasteAsText) {\n                        utils.preventDefaultEvent(e);\n                        var\n                        sel = utils.selection.saveSelection(),\n                                text = prompt(Medium.Messages.pastHere) || '';\n\n                        if (text.length > 0) {\n                            el.focus();\n                            Medium.activeElement = el;\n                            utils.selection.restoreSelection(sel);\n\n                            //encode the text first\n                            text = utils.encodeHtml(text);\n\n                            //cut down it's length\n                            totalLength = text.length + length;\n                            if (settings.maxLength > 0 && totalLength > settings.maxLength) {\n                                text = text.substring(0, settings.maxLength - length);\n                            }\n\n                            if (settings.mode !== Medium.inlineMode) {\n                                text = text.replace(/\\n/g, '<br>');\n                            }\n\n                            (new Medium.Html(medium, text))\n                            .setClean(false)\n                            .insert(settings.beforeInsertHtml, true);\n\n                            medium.clean();\n                            medium.placeholders();\n\n                            return false;\n                        }\n                    } else {\n                        setTimeout(function() {\n                            medium.clean();\n                            medium.placeholders();\n                        }, 20);\n                    }\n                },\n                drag: false\n            };\n            var settings = utils.deepExtend(defaultSettings, userSettings);\n            var el;\n            var newVal;\n            var i;\n            var bridge = {};\n            var drag;\n\n            for (i in defaultSettings) if (defaultSettings.hasOwnProperty(i)) {\n                // Override defaults with data-attributes\n                if (\n                    typeof defaultSettings[i] !== 'object'\n                    && defaultSettings.hasOwnProperty(i)\n                    && settings.element.getAttribute('data-medium-' + key)\n                ) {\n                    newVal = settings.element.getAttribute('data-medium-' + key);\n\n                    if (newVal.toLowerCase() === \"false\" || newVal.toLowerCase() === \"true\") {\n                        newVal = newVal.toLowerCase() === \"true\";\n                    }\n                    settings[i] = newVal;\n                }\n            }\n\n            if (settings.modifiers) {\n                for (i in settings.modifiers) {\n                    if (typeof(key[i]) !== 'undefined') {\n                        settings.modifiers[key[i]] = settings.modifiers[i];\n                    }\n                }\n            }\n\n            if (settings.keyContext) {\n                for (i in settings.keyContext) {\n                    if (typeof(key[i]) !== 'undefined') {\n                        settings.keyContext[key[i]] = settings.keyContext[i];\n                    }\n                }\n            }\n\n            // Extend Settings\n            el = settings.element;\n\n            // Editable\n            el.contentEditable = true;\n            el.className += (' ' + settings.cssClasses.editor) + (' ' + settings.cssClasses.editor + '-' + settings.mode);\n\n            settings.tags = (settings.tags || {});\n            if (settings.tags.outerLevel) {\n                settings.tags.outerLevel = settings.tags.outerLevel.concat([settings.tags.paragraph, settings.tags.horizontalRule]);\n            }\n\n            this.settings = settings;\n            this.element = el;\n            this.intercept = intercept;\n\n            this.action = action;\n            this.cache = cache;\n            this.cursor = cursor;\n            this.utils = utils;\n            this.selection = selection;\n\n            bridge.element = el;\n            bridge.medium = this;\n            bridge.settings = settings;\n\n            bridge.action = action;\n            bridge.cache = cache;\n            bridge.cursor = cursor;\n            bridge.intercept = intercept;\n            bridge.utils = utils;\n            bridge.selection = selection;\n\n            action.setBridge(bridge);\n            cache.setBridge(bridge);\n            cursor.setBridge(bridge);\n            selection.setBridge(bridge);\n\n            // Initialize editor\n            medium.clean();\n            medium.placeholders();\n            action.preserveElementFocus();\n\n            // Capture Events\n            action.listen();\n\n            if (wild) {\n                this.makeUndoable = function () {\n                };\n            } else {\n                this.dirty        = false;\n                this.undoable     = new Medium.Undoable(this);\n                this.undo         = this.undoable.undo;\n                this.redo         = this.undoable.redo;\n                this.makeUndoable = this.undoable.makeUndoable;\n            }\n\n            if (settings.drag) {\n                drag = medium.drag = new Medium.Drag(medium);\n\n                utils.addEvent(el, 'mousemove', function(e) {\n                    e = e || w.event;\n                    var target = e.target || {};\n\n                    if (target.getAttribute('contenteditable') === 'false') {\n                        drag.show(target);\n                    }\n                });\n            }\n\n            el.medium = this;\n\n            // Set as initialized\n            cache.initialized = true;\n        };\n        var utils;\n\n        Medium.prototype = {\n            placeholders: function () {\n                //in IE8, just gracefully degrade to no placeholders\n                if (!w.getComputedStyle) return;\n\n                function qStyle (prop) {\n                    return elStyle.getPropertyValue(prop);\n                }\n\n                var that        = this;\n                var s           = this.settings;\n                var placeholder = this.placeholder || (this.placeholder = d.createElement('div'));\n                var el          = this.element;\n                var cursor      = this.cursor;\n                var style       = placeholder.style;\n                var elStyle     = w.getComputedStyle(el, null);\n                var text        = utils.text(el);\n                var childCount  = el.children.length;\n                var hasFocus    = Medium.activeElement === el;\n\n                el.placeholder = placeholder;\n\n                // Empty Editor\n                if (!hasFocus && text.length < 1 && childCount < 2) {\n                    if (el.placeHolderActive) return;\n\n                    if (!el.innerHTML.match('<' + s.tags.paragraph)) {\n                        el.innerHTML = '';\n                    }\n\n                    // We need to add placeholders\n                    if (s.placeholder.length > 0) {\n                        if (!placeholder.setup) {\n                            placeholder.setup       = true;\n\n                            //background & background color\n                            style.background        = qStyle('background');\n                            style.backgroundColor   = qStyle('background-color');\n\n                            //text size & text color\n                            style.fontSize          = qStyle('font-size');\n                            style.color             = elStyle.color;\n\n                            //begin box-model\n                            //margin\n                            style.marginTop         = qStyle('margin-top');\n                            style.marginBottom      = qStyle('margin-bottom');\n                            style.marginLeft        = qStyle('margin-left');\n                            style.marginRight       = qStyle('margin-right');\n\n                            //padding\n                            style.paddingTop        = qStyle('padding-top');\n                            style.paddingBottom     = qStyle('padding-bottom');\n                            style.paddingLeft       = qStyle('padding-left');\n                            style.paddingRight      = qStyle('padding-right');\n\n                            //border\n                            style.borderTopWidth    = qStyle('border-top-width');\n                            style.borderTopColor    = qStyle('border-top-color');\n                            style.borderTopStyle    = qStyle('border-top-style');\n                            style.borderBottomWidth = qStyle('border-bottom-width');\n                            style.borderBottomColor = qStyle('border-bottom-color');\n                            style.borderBottomStyle = qStyle('border-bottom-style');\n                            style.borderLeftWidth   = qStyle('border-left-width');\n                            style.borderLeftColor   = qStyle('border-left-color');\n                            style.borderLeftStyle   = qStyle('border-left-style');\n                            style.borderRightWidth  = qStyle('border-right-width');\n                            style.borderRightColor  = qStyle('border-right-color');\n                            style.borderRightStyle  = qStyle('border-right-style');\n                            //end box model\n\n                            //element setup\n                            placeholder.className   = s.cssClasses.placeholder + ' ' + s.cssClasses.placeholder + '-' + s.mode;\n                            placeholder.innerHTML   = '<div>' + s.placeholder + '</div>';\n                            el.parentNode.insertBefore(placeholder, el);\n                        }\n\n                        el.className += ' ' + s.cssClasses.clear;\n\n                        style.display = '';\n                        // Add base P tag and do auto focus, give it a min height if el has one\n                        style.minHeight = el.clientHeight + 'px';\n                        style.minWidth = el.clientWidth + 'px';\n\n                        if ( s.mode !== Medium.inlineMode && s.mode !== Medium.inlineRichMode ) {\n                            this.setupContents();\n\n                            if (childCount === 0 && el.firstChild) {\n                                cursor.set(this, 0, el.firstChild);\n                            }\n                        }\n                    }\n                    el.placeHolderActive = true;\n                } else if (el.placeHolderActive) {\n                    el.placeHolderActive = false;\n                    style.display = 'none';\n                    el.className = utils.trim(el.className.replace(s.cssClasses.clear, ''));\n                    this.setupContents();\n                }\n            },\n\n            /**\n            * Cleans element\n            * @param {HtmlElement} [el] default is settings.element\n            */\n            clean: function (el) {\n\n                /*\n                * Deletes invalid nodes\n                * Removes Attributes\n                */\n                var attr;\n                var text;\n                var j;\n                var s                  = this.settings;\n                var html               = this.html;\n                var placeholderClass   = s.cssClasses.placeholder;\n                var attributesToRemove = (s.attributes || {}).remove || [];\n                var tags               = s.tags || {};\n                var onlyOuter          = tags.outerLevel || null;\n                var onlyInner          = tags.innerLevel || null;\n                var outerSwitch        = {};\n                var innerSwitch        = {};\n                var paragraphTag       = (tags.paragraph || '').toUpperCase();\n\n                el = el || s.element;\n\n                if (s.mode === Medium.inlineRichMode) {\n                    onlyOuter = s.tags.innerLevel;\n                }\n\n                if (onlyOuter !== null) {\n                    for (j = 0; j < onlyOuter.length; j++) {\n                        outerSwitch[onlyOuter[j].toUpperCase()] = true;\n                    }\n                }\n\n                if (onlyInner !== null) {\n                    for (j = 0; j < onlyInner.length; j++) {\n                        innerSwitch[onlyInner[j].toUpperCase()] = true;\n                    }\n                }\n\n                utils.traverseAll(el, {\n                    element: function(child, i, depth, parent) {\n                        var nodeName = child.nodeName,\n                                shouldDelete = true;\n\n                        // Remove attributes\n                        for (j = 0; j < attributesToRemove.length; j++) {\n                            attr = attributesToRemove[j];\n                            if (child.hasAttribute(attr)) {\n                                if (child.getAttribute(attr) !== placeholderClass) {\n                                    child.removeAttribute(attr);\n                                }\n                            }\n                        }\n\n                        if ( onlyOuter === null && onlyInner === null ) {\n                            return;\n                        }\n\n                        if (depth    === 1 && outerSwitch[nodeName] !== undefined) {\n                            shouldDelete = false;\n                        } else if (depth > 1 && innerSwitch[nodeName] !== undefined) {\n                            shouldDelete = false;\n                        }\n\n                        // Convert tags or delete\n                        if (shouldDelete) {\n                            if (w.getComputedStyle(child, null).getPropertyValue('display') === 'block') {\n                                if (paragraphTag.length > 0 && paragraphTag !== nodeName) {\n                                    utils.changeTag(child, paragraphTag);\n                                }\n\n                                if (depth > 1) {\n                                    while (parent.childNodes.length > i) {\n                                        parent.parentNode.insertBefore(parent.lastChild, parent.nextSibling);\n                                    }\n                                }\n                            } else {\n                                switch (nodeName) {\n                                    case 'BR':\n                                        if (child === child.parentNode.lastChild) {\n                                            if (child === child.parentNode.firstChild) {\n                                                break;\n                                            }\n                                            text = document.createTextNode(\"\");\n                                            text.innerHTML = '&nbsp';\n                                            child.parentNode.insertBefore(text, child);\n                                            break;\n                                        }\n                                    default:\n                                        while (child.firstChild !== null) {\n                                            child.parentNode.insertBefore(child.firstChild, child);\n                                        }\n                                        utils.detachNode(child);\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                });\n            },\n\n            /**\n            *\n            * @param {String|Object} html\n            * @param {Function} [callback]\n            * @param {Boolean} [skipChangeEvent]\n            * @returns {Medium}\n            */\n            insertHtml: function (html, callback, skipChangeEvent) {\n                var result = (new Medium.Html(this, html)).insert(this.settings.beforeInsertHtml);\n                if (skipChangeEvent === true) {\n                    utils.triggerEvent(this.element, \"change\");\n                }\n                if (callback) {\n                    callback.apply(result);\n                }\n                return this;\n            },\n\n            addTag: function (tag, shouldFocus, isEditable, afterElement) {\n                if (!this.settings.beforeAddTag(tag, shouldFocus, isEditable, afterElement)) {\n                    var newEl = d.createElement(tag),\n                            toFocus;\n\n                    if (typeof isEditable !== \"undefined\" && isEditable === false) {\n                        newEl.contentEditable = false;\n                    }\n                    if (newEl.innerHTML.length == 0) {\n                        newEl.innerHTML = ' ';\n                    }\n                    if (afterElement && afterElement.nextSibling) {\n                        afterElement.parentNode.insertBefore(newEl, afterElement.nextSibling);\n                        toFocus = afterElement.nextSibling;\n\n                    } else {\n                        this.element.appendChild(newEl);\n                        toFocus = this.lastChild();\n                    }\n\n                    if (shouldFocus) {\n                        this.cache.focusedElement = toFocus;\n                        this.cursor.set(this, 0, toFocus);\n                    }\n                    return newEl;\n                }\n                return null;\n            },\n\n            /**\n                         *\n                         * @param {String} tagName\n                         * @param {Object} [attributes]\n                         * @param {Boolean} [skipChangeEvent]\n                         * @returns {Medium}\n                         */\n            invokeElement: function (tagName, attributes, skipChangeEvent) {\n                var settings = this.settings,\n                        attributes = attributes || {},\n                        remove = attributes.remove || [];\n\n                switch (settings.mode) {\n                    case Medium.inlineMode:\n                    case Medium.partialMode:\n                        return this;\n                    default:\n                }\n\n                //invoke works off class, so if it isn't there, we just add it\n                if (remove.length > 0) {\n                    if (!utils.arrayContains(settings, 'class')) {\n                        remove.push('class');\n                    }\n                }\n\n                (new Medium.Element(this, tagName, attributes))\n                .invoke(this.settings.beforeInvokeElement);\n\n                if (skipChangeEvent === true) {\n                    utils.triggerEvent(this.element, \"change\");\n                }\n\n                return this;\n            },\n\n            /**\n                         * @returns {string}\n                         */\n            behavior: function () {\n                return (wild ? Medium.wildBehavior : Medium.domesticatedBehavior);\n            },\n\n            /**\n                         *\n                         * @param value\n                         * @returns {Medium}\n                         */\n            value: function (value) {\n                if (typeof value !== 'undefined') {\n                    this.element.innerHTML = value;\n\n                    this.clean();\n                    this.placeholders();\n                } else {\n                    return this.element.innerHTML;\n                }\n\n                return this;\n            },\n\n            /**\n                         * Focus on element\n                         * @returns {Medium}\n                         */\n            focus: function () {\n                var el = this.element;\n                el.focus();\n                return this;\n            },\n\n            /**\n                         * Select all text\n                         * @returns {Medium}\n                         */\n            select: function () {\n                var el = this.element,\n                        range,\n                        selection;\n\n                el.focus();\n\n                if (d.body.createTextRange) {\n                    range = d.body.createTextRange();\n                    range.moveToElementText(el);\n                    range.select();\n                } else if (w.getSelection) {\n                    selection = w.getSelection();\n                    range = d.createRange();\n                    range.selectNodeContents(el);\n                    selection.removeAllRanges();\n                    selection.addRange(range);\n                }\n\n                return this;\n            },\n\n            isActive: function () {\n                return (Medium.activeElement === this.element);\n            },\n\n            setupContents: function () {\n                var el = this.element,\n                        children = el.children,\n                        childNodes = el.childNodes,\n                        initialParagraph,\n                        s = this.settings;\n\n                if (\n                    !s.tags.paragraph\n                    || children.length > 0\n                    || s.mode === Medium.inlineMode\n                    || s.mode === Medium.inlineRichMode\n                ) {\n                    return Medium.Utilities;\n                }\n\n                //has content, but no children\n                if (childNodes.length > 0) {\n                    initialParagraph = d.createElement(s.tags.paragraph);\n                    if (el.innerHTML.match('^[&]nbsp[;]')) {\n                        el.innerHTML = el.innerHTML.substring(6, el.innerHTML.length - 1);\n                    }\n                    initialParagraph.innerHTML = el.innerHTML;\n                    el.innerHTML = '';\n                    el.appendChild(initialParagraph);\n                    this.cursor.set(this, initialParagraph.innerHTML.length, initialParagraph);\n                } else {\n                    initialParagraph = d.createElement(s.tags.paragraph);\n                    initialParagraph.innerHTML = '&nbsp;';\n                    el.appendChild(initialParagraph);\n                }\n\n                return this;\n            },\n\n            destroy: function () {\n                var el = this.element,\n                        intercept = this.intercept,\n                        settings = this.settings,\n                        placeholder = this.placeholder || null;\n\n                if (placeholder !== null && placeholder.setup) {\n                    //remove placeholder\n                    placeholder.parentNode.removeChild(placeholder);\n                    delete el.placeHolderActive;\n                }\n\n                //remove contenteditable\n                el.removeAttribute('contenteditable');\n\n                //remove classes\n                el.className = utils.trim(el.className\n                                                                    .replace(settings.cssClasses.editor, '')\n                                                                    .replace(settings.cssClasses.clear, '')\n                                                                    .replace(settings.cssClasses.editor + '-' + settings.mode, ''));\n\n                //remove events\n                utils\n                .removeEvent(el, 'keyup', intercept.up)\n                .removeEvent(el, 'keydown', intercept.down)\n                .removeEvent(el, 'focus', intercept.focus)\n                .removeEvent(el, 'blur', intercept.focus)\n                .removeEvent(el, 'paste', settings.pasteEventHandler);\n            },\n\n            // Clears the element and restores the placeholder\n            clear: function () {\n                this.element.innerHTML = '';\n                this.placeholders();\n            },\n\n            /**\n                         * Splits content in medium element at cursor\n                         * @returns {DocumentFragment|null}\n                         */\n            splitAtCaret: function() {\n                if (!this.isActive()) return null;\n\n                var selector = (w.getSelection || d.selection),\n                        sel = selector(),\n                        offset = sel.focusOffset,\n                        node = sel.focusNode,\n                        el = this.element,\n                        range = d.createRange(),\n                        endRange = d.createRange(),\n                        contents;\n\n                range.setStart(node, offset);\n                endRange.selectNodeContents(el);\n                range.setEnd(endRange.endContainer, endRange.endOffset);\n\n                contents = range.extractContents();\n\n                return contents;\n            },\n\n            /**\n                         * Deletes selection\n                         */\n            deleteSelection: function() {\n                if (!this.isActive()) return;\n\n                var sel = rangy.getSelection(),\n                        range;\n\n                if (sel.rangeCount > 0) {\n                    range = sel.getRangeAt(0);\n                    range.deleteContents();\n                }\n            },\n\n            lastChild: function () {\n                return this.element.lastChild;\n            }\n        };\n\n        /**\n                 * @param {Medium} medium\n                 * @param {String} tagName\n                 * @param {Object} [attributes]\n                 * @constructor\n                 */\n        Medium.Element = function (medium, tagName, attributes) {\n            this.medium = medium;\n            this.element = medium.settings.element;\n            if (wild) {\n                this.tagName = tagName;\n            } else {\n                switch (tagName.toLowerCase()) {\n                    case 'bold':\n                        this.tagName = 'b';\n                        break;\n                    case 'italic':\n                        this.tagName = 'i';\n                        break;\n                    case 'underline':\n                        this.tagName = 'u';\n                        break;\n                    default:\n                        this.tagName = tagName;\n                }\n            }\n            this.attributes = attributes || {};\n            this.clean = true;\n        };\n\n\n        /**\n        * @constructor\n        * @param {Medium} medium\n        * @param {String|HtmlElement} html\n        */\n        Medium.Html = function (medium, html) {\n            this.medium = medium;\n            this.element = medium.settings.element;\n            this.clean = true;\n        };\n\n        /**\n        *\n        * @constructor\n        */\n        Medium.Injector = function () {\n        };\n\n        if (wild) {\n            Medium.Element.prototype = {\n                /**\n                                 * @methodOf Medium.Element\n                                 * @param {Function} [fn]\n                                 */\n                invoke: function (fn) {\n                    if (Medium.activeElement === this.element) {\n                        if (fn) {\n                            fn.apply(this);\n                        }\n                        d.execCommand(this.tagName, false);\n                    }\n                },\n                setClean: function () {\n                    return this;\n                }\n            };\n\n            Medium.Injector.prototype = {\n                /**\n                                 * @methodOf Medium.Injector\n                                 * @param {String|HtmlElement} htmlRaw\n                                 * @param {Boolean} [selectInserted]\n                                 * @returns {null}\n                                 */\n                inject: function (htmlRaw, selectInserted) {\n                    this.insertHTML(htmlRaw, selectInserted);\n                    return null;\n                }\n            };\n\n            /**\n                         *\n                         * @constructor\n                         */\n            Medium.Undoable = function () {\n            };\n        }\n\n        //if medium is domesticated (ie, not wild)\n        else {\n            rangy.rangePrototype.insertNodeAtEnd = function (node) {\n                var range = this.cloneRange();\n                range.collapse(false);\n                range.insertNode(node);\n                range.detach();\n                this.setEndAfter(node);\n            };\n\n            Medium.Element.prototype = {\n                /**\n                                 * @methodOf Medium.Element\n                                 * @param {Function} [fn]\n                                 */\n                invoke: function (fn) {\n                    if (Medium.activeElement === this.element) {\n                        if (fn) {\n                            fn.apply(this);\n                        }\n\n                        var\n                        attr = this.attributes,\n                                tagName = this.tagName.toLowerCase(),\n                                applier,\n                                cl;\n\n                        if (attr.className !== undefined) {\n                            cl = (attr.className.split[' '] || [attr.className]).shift();\n                            delete attr.className;\n                        } else {\n                            cl = 'medium-' + tagName;\n                        }\n\n                        applier = rangy.createClassApplier(cl, {\n                            elementTagName: tagName,\n                            elementAttributes: this.attributes\n                        });\n\n                        this.medium.makeUndoable();\n\n                        applier.toggleSelection(w);\n\n                        if (this.clean) {\n                            //cleanup\n                            this.medium.clean();\n                            this.medium.placeholders();\n                        }\n\n\n                    }\n                },\n\n                /**\n                                 *\n                                 * @param {Boolean} clean\n                                 * @returns {Medium.Element}\n                                 */\n                setClean: function (clean) {\n                    this.clean = clean;\n                    return this;\n                }\n            };\n\n            Medium.Injector.prototype = {\n                /**\n                                 * @methodOf Medium.Injector\n                                 * @param {String|HtmlElement} htmlRaw\n                                 * @returns {HtmlElement}\n                                 */\n                inject: function (htmlRaw) {\n                    var html, isConverted = false;\n                    if (typeof htmlRaw === 'string') {\n                        var htmlConverter = d.createElement('div');\n                        htmlConverter.innerHTML = htmlRaw;\n                        html = htmlConverter.childNodes;\n                        isConverted = true;\n                    } else {\n                        html = htmlRaw;\n                    }\n\n                    this.insertHTML('<span id=\"wedge\"></span>');\n\n                    var wedge = d.getElementById('wedge'),\n                            parent = wedge.parentNode,\n                            i = 0;\n                    wedge.removeAttribute('id');\n\n                    if (isConverted) {\n                        while (i < html.length) {\n                            parent.insertBefore(html[i], wedge);\n                        }\n                    } else {\n                        parent.insertBefore(html, wedge);\n                    }\n                    parent.removeChild(wedge);\n                    wedge = null;\n\n                    return html;\n                }\n            };\n\n            /**\n                         * @param {Medium} medium\n                         * @constructor\n                         */\n            Medium.Undoable = function (medium) {\n                var me = this,\n                        element = medium.settings.element,\n                        startValue = element.innerHTML,\n                        timer,\n                        stack = new Undo.Stack(),\n                        EditCommand = Undo.Command.extend({\n                            constructor: function (oldValue, newValue) {\n                                this.oldValue = oldValue;\n                                this.newValue = newValue;\n                            },\n                            execute: function () {\n                            },\n                            undo: function () {\n                                element.innerHTML = this.oldValue;\n                                medium.canUndo = stack.canUndo();\n                                medium.canRedo = stack.canRedo();\n                                medium.dirty = stack.dirty();\n                            },\n                            redo: function () {\n                                element.innerHTML = this.newValue;\n                                medium.canUndo = stack.canUndo();\n                                medium.canRedo = stack.canRedo();\n                                medium.dirty = stack.dirty();\n                            }\n                        }),\n                        makeUndoable = function () {\n                            var newValue = element.innerHTML;\n                            // ignore meta key presses\n                            if (newValue != startValue) {\n\n                                if (!me.movingThroughStack) {\n                                    // this could try and make a diff instead of storing snapshots\n                                    stack.execute(new EditCommand(startValue, newValue));\n                                    startValue = newValue;\n                                    medium.dirty = stack.dirty();\n                                }\n\n                                utils.triggerEvent(medium.settings.element, \"change\");\n                            }\n                        };\n\n                this.medium = medium;\n                this.timer = timer;\n                this.stack = stack;\n                this.makeUndoable = makeUndoable;\n                this.EditCommand = EditCommand;\n                this.movingThroughStack = false;\n\n                utils\n                .addEvent(element, 'keyup', function (e) {\n                    if (e.ctrlKey || e.keyCode === key.z) {\n                        utils.preventDefaultEvent(e);\n                        return;\n                    }\n\n                    // a way too simple algorithm in place of single-character undo\n                    clearTimeout(timer);\n                    timer = setTimeout(function () {\n                        makeUndoable();\n                    }, 250);\n                })\n\n                .addEvent(element, 'keydown', function (e) {\n                    if (!e.ctrlKey || e.keyCode !== key.z) {\n                        me.movingThroughStack = false;\n                        return true;\n                    }\n\n                    utils.preventDefaultEvent(e);\n\n                    me.movingThroughStack = true;\n\n                    if (e.shiftKey) {\n                        stack.canRedo() && stack.redo()\n                    } else {\n                        stack.canUndo() && stack.undo();\n                    }\n                });\n            };\n        }\n\n        //Thank you Tim Down (super uber genius): http://stackoverflow.com/questions/6690752/insert-html-at-caret-in-a-contenteditable-div/6691294#6691294\n        Medium.Injector.prototype.insertHTML = function (html, selectPastedContent) {\n            var sel, range;\n            if (w.getSelection) {\n                // IE9 and non-IE\n                sel = w.getSelection();\n                if (sel.getRangeAt && sel.rangeCount) {\n                    range = sel.getRangeAt(0);\n                    range.deleteContents();\n\n                    // Range.createContextualFragment() would be useful here but is\n                    // only relatively recently standardized and is not supported in\n                    // some browsers (IE9, for one)\n                    var el = d.createElement(\"div\");\n                    el.innerHTML = html;\n                    var frag = d.createDocumentFragment(), node, lastNode;\n                    while ((node = el.firstChild)) {\n                        lastNode = frag.appendChild(node);\n                    }\n                    var firstNode = frag.firstChild;\n                    range.insertNode(frag);\n\n                    // Preserve the selection\n                    if (lastNode) {\n                        range = range.cloneRange();\n                        range.setStartAfter(lastNode);\n                        if (selectPastedContent) {\n                            range.setStartBefore(firstNode);\n                        } else {\n                            range.collapse(true);\n                        }\n                        sel.removeAllRanges();\n                        sel.addRange(range);\n                    }\n                }\n            } else if ((sel = d.selection) && sel.type != \"Control\") {\n                // IE < 9\n                var originalRange = sel.createRange();\n                originalRange.collapse(true);\n                sel.createRange().pasteHTML(html);\n                if (selectPastedContent) {\n                    range = sel.createRange();\n                    range.setEndPoint(\"StartToStart\", originalRange);\n                    range.select();\n                }\n            }\n        };\n\n        Medium.Html.prototype = {\n            /**\n            * @methodOf Medium.Html\n            * @param {Function} [fn]\n            * @param {Boolean} [selectInserted]\n            * @returns {HtmlElement}\n            */\n            insert: function (fn, selectInserted) {\n                if (Medium.activeElement === this.element) {\n                    if (fn) {\n                        fn.apply(this);\n                    }\n\n                    var inserted = this.injector.inject(this.html, selectInserted);\n\n                    if (this.clean) {\n                        //cleanup\n                        this.medium.clean();\n                        this.medium.placeholders();\n                    }\n\n                    this.medium.makeUndoable();\n\n                    return inserted;\n                } else {\n                    return null;\n                }\n            },\n\n            /**\n                         * @attributeOf {Medium.Injector} Medium.Html\n                         */\n            injector: new Medium.Injector(),\n\n            /**\n                         * @methodOf Medium.Html\n                         * @param clean\n                         * @returns {Medium.Html}\n                         */\n            setClean: function (clean) {\n                this.clean = clean;\n                return this;\n            }\n        };\n\n        Medium.Utilities = utils = {\n            /*\n                         * Keyboard Interface events\n                         */\n            isCommand: function (s, e, fnTrue, fnFalse) {\n                if ((s.modifier === 'ctrl' && e.ctrlKey ) ||\n                        (s.modifier === 'cmd' && e.metaKey ) ||\n                        (s.modifier === 'auto' && (e.ctrlKey || e.metaKey) )\n                     ) {\n                    return fnTrue.call();\n                } else {\n                    return fnFalse.call();\n                }\n            },\n            isShift: function (e, fnTrue, fnFalse) {\n                if (e.shiftKey) {\n                    return fnTrue.call();\n                } else {\n                    return fnFalse.call();\n                }\n            },\n            isModifier: function (settings, e, fn) {\n                var cmd = settings.modifiers[e.keyCode];\n                if (cmd) {\n                    return fn.call(null, cmd);\n                }\n                return false;\n            },\n            special: (function () {\n                var special = {};\n\n                special[key['backspace']] = true;\n                special[key['shift']] = true;\n                special[key['ctrl']] = true;\n                special[key['alt']] = true;\n                special[key['delete']] = true;\n                special[key['cmd']] = true;\n\n                return special;\n            })(),\n            isSpecial: function (cacheCmd, e) {\n\n                if (cacheCmd) {\n                    return true;\n                }\n\n                return typeof Medium.Utilities.special[e.keyCode] !== 'undefined';\n            },\n            navigational: (function () {\n                var navigational = {};\n\n                navigational[key['upArrow']] = true;\n                navigational[key['downArrow']] = true;\n                navigational[key['leftArrow']] = true;\n                navigational[key['rightArrow']] = true;\n\n                return navigational;\n            })(),\n            isNavigational: function (e) {\n                return typeof Medium.Utilities.navigational[e.keyCode] !== 'undefined';\n            },\n\n            /**\n                         * @param element\n                         * @param eventNamesString\n                         * @param func\n                         * @returns Medium.Utilities\n                         */\n            addEvents: function(element, eventNamesString, func) {\n                var i = 0,\n                        eventName,\n                        eventNames = eventNamesString.split(' '),\n                        max = eventNames.length,\n                        utils = Medium.Utilities;\n\n                for(;i < max; i++) {\n                    eventName = eventNames[i];\n                    if (eventName.length > 0) {\n                        utils.addEvent(element, eventName, func);\n                    }\n                }\n\n                return Medium.Utilities;\n            },\n            /*\n                         * Handle Events\n                         */\n            addEvent: function addEvent(element, eventName, func) {\n                if (element.addEventListener) {\n                    element.addEventListener(eventName, func, false);\n                } else if (element.attachEvent) {\n                    element.attachEvent(\"on\" + eventName, func);\n                } else {\n                    element['on' + eventName] = func;\n                }\n\n                return Medium.Utilities;\n            },\n            removeEvent: function removeEvent(element, eventName, func) {\n                if (element.removeEventListener) {\n                    element.removeEventListener(eventName, func, false);\n                } else if (element.detachEvent) {\n                    element.detachEvent(\"on\" + eventName, func);\n                } else {\n                    element['on' + eventName] = null;\n                }\n\n                return Medium.Utilities;\n            },\n            preventDefaultEvent: function (e) {\n                if (e.preventDefault) {\n                    e.preventDefault();\n                } else {\n                    e.returnValue = false;\n                }\n\n                return Medium.Utilities;\n            },\n            stopPropagation: function(e) {\n                e = e || window.event;\n                e.cancelBubble = true;\n\n                if (e.stopPropagation !== undefined) {\n                    e.stopPropagation();\n                }\n\n                return Medium.Utilities;\n            },\n            isEventSupported: function (element, eventName) {\n                eventName = 'on' + eventName;\n                var el = d.createElement(element.tagName),\n                        isSupported = (eventName in el);\n\n                if (!isSupported) {\n                    el.setAttribute(eventName, 'return;');\n                    isSupported = typeof el[eventName] == 'function';\n                }\n                el = null;\n                return isSupported;\n            },\n            triggerEvent: function (element, eventName) {\n                var e;\n                if (d.createEvent) {\n                    e = d.createEvent(\"HTMLEvents\");\n                    e.initEvent(eventName, true, true);\n                    e.eventName = eventName;\n                    element.dispatchEvent(e);\n                } else {\n                    e = d.createEventObject();\n                    element.fireEvent(\"on\" + eventName, e);\n                }\n\n                return Medium.Utilities;\n            },\n\n            deepExtend: function (destination, source) {\n                for (var property in source) if (source.hasOwnProperty(property)) {\n                    if (\n                        source[property]\n                        && source[property].constructor\n                        && source[property].constructor === Object\n                    ) {\n                        destination[property] = destination[property] || {};\n                        Medium.Utilities.deepExtend(destination[property], source[property]);\n                    } else {\n                        destination[property] = source[property];\n                    }\n                }\n                return destination;\n            },\n            /*\n                         * This is a Paste Hook. When the user pastes\n                         * content, this ultimately converts it into\n                         * plain text before inserting the data.\n                         */\n            pasteHook: function (medium, fn) {\n                var textarea = d.createElement('textarea'),\n                        el = medium.element,\n                        existingValue,\n                        existingLength,\n                        overallLength,\n                        s = medium.settings,\n                        html = medium.html;\n\n                textarea.className = s.cssClasses.pasteHook;\n\n                el.parentNode.appendChild(textarea);\n\n                textarea.focus();\n\n                if (!wild) {\n                    medium.makeUndoable();\n                }\n                setTimeout(function () {\n                    el.focus();\n                    if (s.maxLength > 0) {\n                        existingValue = utils.text(el);\n                        existingLength = existingValue.length;\n                        overallLength = existingLength + textarea.value.length;\n                        if (overallLength > existingLength) {\n                            textarea.value = textarea.value.substring(0, s.maxLength - existingLength);\n                        }\n                    }\n                    fn(textarea.value);\n                    utils.detachNode( textarea );\n                }, 2);\n\n                return Medium.Utilities;\n            },\n            traverseAll: function(element, options, depth) {\n                var children = element.childNodes,\n                        length = children.length,\n                        i = 0,\n                        node,\n                        depth = depth || 1;\n\n                options = options || {};\n\n                if (length > 0) {\n                    for(;i < length;i++) {\n                        node = children[i];\n                        switch (node.nodeType) {\n                            case 1:\n                                Medium.Utilities.traverseAll(node, options, depth + 1);\n                                if (options.element !== undefined) options.element(node, i, depth, element);\n                                break;\n                            case 3:\n                                if (options.fragment !== undefined) options.fragment(node, i, depth, element);\n                        }\n\n                        //length may change\n                        length = children.length;\n                        //if length did change, and we are at the last item, this causes infinite recursion, so if we are at the last item, then stop to prevent this\n                        if (node === element.lastChild) {\n                            i = length;\n                        }\n                    }\n                }\n                return Medium.Utilities;\n            },\n            trim: function (string) {\n                return string.replace(/^[\\s]+|\\s+$/g, '');\n            },\n            arrayContains: function(array, variable) {\n                var i = array.length;\n                while (i--) {\n                    if (array[i] === variable) {\n                        return true;\n                    }\n                }\n                return false;\n            },\n            addClass: function(el, className) {\n                if (el.classList)\n                    el.classList.add(className);\n                else\n                    el.className += ' ' + className;\n\n                return Medium.Utilities;\n            },\n            removeClass: function(el, className) {\n                if (el.classList)\n                    el.classList.remove(className);\n                else\n                    el.className = el.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n                return Medium.Utilities;\n            },\n            hasClass: function(el, className) {\n                if (el.classList)\n                    return el.classList.contains(className);\n                else\n                    return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);\n            },\n            isHidden: function(el) {\n                return el.offsetWidth === 0 || el.offsetHeight === 0;\n            },\n            isVisible: function(el) {\n                return el.offsetWidth !== 0 || el.offsetHeight !== 0;\n            },\n            encodeHtml: function ( html ) {\n                return d.createElement( 'a' ).appendChild(\n                    d.createTextNode( html ) ).parentNode.innerHTML;\n            },\n            text: function (node, val) {\n                if (val) {\n                    if ((node.textContent) && (typeof (node.textContent) != \"undefined\")) {\n                        node.textContent = val;\n                    } else {\n                        node.innerText = val;\n                    }\n                }\n\n                else if (node.innerText) {\n                    return utils.trim(node.innerText);\n                }\n\n                else if (node.textContent) {\n                    return utils.trim(node.textContent);\n                }\n                //document fragment\n                else if (node.data) {\n                    return utils.trim(node.data);\n                }\n\n                //for good measure\n                return '';\n            },\n            changeTag: function (oldNode, newTag) {\n                var newNode = d.createElement(newTag),\n                        node,\n                        nextNode;\n\n                node = oldNode.firstChild;\n                while (node) {\n                    nextNode = node.nextSibling;\n                    newNode.appendChild(node);\n                    node = nextNode;\n                }\n\n                oldNode.parentNode.insertBefore(newNode, oldNode);\n                oldNode.parentNode.removeChild(oldNode);\n\n                return newNode;\n            },\n            detachNode: function (el) {\n                if (el.parentNode !== null) {\n                    el.parentNode.removeChild(el);\n                }\n                return el;\n            },\n            baseAtCaret: function (medium) {\n                if (!medium.isActive()) return null;\n\n                var sel = w.getSelection ? w.getSelection() : document.selection;\n\n                if (sel.rangeCount) {\n                    var selRange = sel.getRangeAt(0),\n                            container = selRange.endContainer;\n\n                    switch (container.nodeType) {\n                        case 3:\n                            if (container.data && container.data.length != selRange.endOffset) return false;\n                            break;\n                    }\n\n                    return container;\n                }\n\n                return null;\n            },\n            atCaret: function (medium) {\n                var container = this.baseAtCaret(medium) || {},\n                        el = medium.element;\n\n                if (container === false) return null;\n\n                while (container && container.parentNode !== el) {\n                    container = container.parentNode;\n                }\n\n                if (container && container.nodeType == 1) {\n                    return container;\n                }\n\n                return null;\n            },\n            hide: function(el) {\n                el.style.display = 'none';\n            },\n            show: function(el) {\n                el.style.display = '';\n            },\n            hideAnim: function(el) {\n                el.style.opacity = 1;\n            },\n            showAnim: function(el) {\n                el.style.opacity = 0.01;\n                el.style.display = '';\n            }\n        };\n\n        /*\n                 * Handle Selection Logic\n                 */\n        Medium.Selection = function () {\n        };\n        Medium.Selection.prototype = {\n            setBridge: function (bridge) {\n                for (var i in bridge) if (bridge.hasOwnProperty(i)) {\n                    this[i] = bridge[i];\n                }\n            },\n            saveSelection: function () {\n                if (w.getSelection) {\n                    var sel = w.getSelection();\n                    if (sel.rangeCount > 0) {\n                        return sel.getRangeAt(0);\n                    }\n                } else if (d.selection && d.selection.createRange) { // IE\n                    return d.selection.createRange();\n                }\n                return null;\n            },\n\n            restoreSelection: function (range) {\n                if (range) {\n                    if (w.getSelection) {\n                        var sel = w.getSelection();\n                        sel.removeAllRanges();\n                        sel.addRange(range);\n                    } else if (d.selection && range.select) { // IE\n                        range.select();\n                    }\n                }\n            }\n        };\n\n        /*\n                 * Handle Cursor Logic\n                 */\n        Medium.Cursor = function () {\n        };\n        Medium.Cursor.prototype = {\n            setBridge: function (bridge) {\n                for (var i in bridge) if (bridge.hasOwnProperty(i)) {\n                    this[i] = bridge[i];\n                }\n            },\n            set: function (medium, pos, el) {\n                var range,\n                        html = this.html;\n\n                if (d.createRange) {\n                    var selection = w.getSelection(),\n                            lastChild = medium.lastChild(),\n                            length = utils.text(lastChild).length - 1,\n                            toModify = el ? el : lastChild,\n                            theLength = ((typeof pos !== 'undefined') && (pos !== null) ? pos : length);\n\n                    range = d.createRange();\n                    range.setStart(toModify, theLength);\n                    range.collapse(true);\n                    selection.removeAllRanges();\n                    selection.addRange(range);\n                } else {\n                    range = d.body.createTextRange();\n                    range.moveToElementText(el);\n                    range.collapse(false);\n                    range.select();\n                }\n            },\n            parent: function () {\n                var target = null, range;\n\n                if (w.getSelection) {\n                    range = w.getSelection().getRangeAt(0);\n                    target = range.commonAncestorContainer;\n\n                    target = (target.nodeType === 1\n                                        ? target\n                                        : target.parentNode\n                                     );\n                }\n\n                else if (d.selection) {\n                    target = d.selection.createRange().parentElement();\n                }\n\n                if (target.tagName == 'SPAN') {\n                    target = target.parentNode;\n                }\n\n                return target;\n            },\n            caretToBeginning: function (el) {\n                this.set(this, 0, el);\n            },\n            caretToEnd: function (el) {\n                this.set(this, utils.text(el).length, el);\n            }\n        };\n\n        Medium.Toolbar = function(medium, buttons) {\n            var elementCreator = d.createElement('div'),\n                    that = this;\n\n            elementCreator.innerHTML = this.html;\n\n            this.buttons = buttons;\n            this.element = elementCreator.children[0];\n            d.body.appendChild(this.element);\n            this.active = false;\n            this.busy = true;\n\n            utils\n            .addEvents(document, 'mouseup keyup', function(e) {\n                if (Medium.activeElement === medium.element && !that.busy) {\n                    that.goToSelection();\n                }\n            })\n            .addEvent(w, 'scroll', function() {\n                if (that.active) {\n                    that.goToSelection();\n                }\n            });\n        };\n        Medium.Toolbar.prototype = {\n            fixedClass: 'Medium-toolbar-fixed',\n            showClass: 'Medium-toolbar-show',\n            hideClass: 'Medium-toolbar-hide',\n\n            html:\n            '<div class=\"Medium-toolbar\">\\\n<div class=\"Medium-tail-outer\">\\\n<div class=\"Medium-tail-inner\"></div>\\\n</div>\\\n<div id=\"Medium-buttons\"></div>\\\n<table id=\"Medium-options\">\\\n<tbody>\\\n<tr>\\\n</tr>\\\n</tbody>\\\n</table>\\\n</div>',\n\n            goToSelection: function() {\n            var high = this.getHighlighted(),\n            y = high.boundary.top - 5,\n            el = this.element,\n            style = el.style;\n\n            if (w.scrollTop > 0) {\n            utils.addClass(el, this.fixedClass);\n        } else {\n            utils.removeClass(el, this.fixedClass);\n        }\n\n        if (high !== null) {\n            if (high.range.startOffset === high.range.endOffset && !high.text) {\n                utils\n                .removeClass(el, this.showClass)\n                .addClass(el, this.hideClass);\n\n                this.active = false;\n            } else {\n                utils\n                .removeClass(el, this.hideClass)\n                .removeClass(el, this.showClass);\n\n                style.opacity = 0.01;\n                utils.addClass(el, this.showClass);\n                style.opacity = 1;\n                style.top = (y - 65) + \"px\";\n                style.left = (\n                    (\n                        high.boundary.left + (high.boundary.width / 2)\n                    )\n                    - (el.clientWidth / 2)\n                ) + \"px\";\n\n                this.active = true;\n            }\n        }\n    },\n\n                                getHighlighted: function() {\n        var selection = w.getSelection(),\n                range = (selection.anchorNode ? selection.getRangeAt(0) : false);\n\n        if (!range) {\n            return null;\n        }\n\n        return {\n            selection : selection,\n            range : range,\n            text : utils.trim(range.toString()),\n            boundary : range.getBoundingClientRect()\n        };\n    }\n};\n\n Medium.Drag = function(medium) {\n    this.medium = medium;\n\n    var that = this,\n            iconSrc = this.iconSrc.replace(/[{][{]([a-zA-Z]+)[}][}]/g, function(ignore, match) {\n                if (that.hasOwnProperty(match)) {\n                    return that[match];\n                }\n\n                return ignore;\n            }),\n            icon = this.icon = d.createElement('img');\n\n    icon.className = this.buttonClass;\n    icon.setAttribute('contenteditable', 'false');\n    icon.setAttribute('src', iconSrc);\n\n    this.hide();\n    this.element = null;\n    this.protectedElement = null;\n\n    utils\n    .addEvent(icon, 'dragstart', function(e) {\n        if (that.protectedElement !== null) return;\n\n        e = e || w.event;\n\n        that.protectedElement = utils.detachNode(that.element);\n\n        that.icon.style.opacity = 0.00;\n    })\n    .addEvent(icon, 'mouseover', function(e) {\n        if (that.protectedElement !== null) return;\n\n        utils\n        .stopPropagation(e)\n        .addClass(that.element, that.elementClass);\n\n    })\n    .addEvent(icon, 'mouseout', function(e) {\n        if (that.protectedElement !== null) return;\n\n        utils\n        .stopPropagation(e)\n        .removeClass(that.element, that.elementClass);\n\n    })\n    .addEvent(icon, 'dragend', d.body.ondragend = function(e) {\n        if (that.protectedElement === null) return;\n\n        setTimeout(function() {\n            that.cleanCanvas();\n            that.protectedElement = null;\n        }, 1);\n    });\n};\nMedium.Drag.prototype = {\n    elementClass: 'Medium-focused',\n    buttonClass: 'Medium-drag',\n\n    //thank you ascii for not including a directional icon (boo!)\n    //http://www.flaticon.com/free-icon/pointer-crosstree_10119\n    iconSrc: 'data:image/svg+xml;utf8,\\\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"21.424px\" height=\"21.424px\" viewBox=\"0 0 21.424 21.424\" style=\"enable-background:new 0 0 21.424 21.424;\" xml:space=\"preserve\">\\\n<g>\\\n<g>\\\n<path style=\"fill:{{iconColor}};\" d=\"M13.616,17.709L13.616,17.709h0.781l-3.686,3.715l-3.685-3.715h0.781l0,0H13.616z M13.616,17.709 M14.007,17.709 M12.555,19.566 M8.87,19.566 M7.418,17.709 M7.809,17.709 M10.712,17.709\"/>\\\n<path style=\"fill:{{iconColor}};\" d=\"M13.616,3.715L13.616,3.715h0.781L10.712,0L7.027,3.715h0.781l0,0H13.616z M13.616,3.715 M14.007,3.715 M12.555,1.858 M8.87,1.858 M7.418,3.715 M7.809,3.715 M10.712,3.715\"/>\\\n<path style=\"fill:{{iconColor}};\" d=\"M3.716,13.616L3.716,13.616v0.781L0,10.712l3.716-3.685v0.781l0,0V13.616z M3.716,13.616 M3.716,14.007 M1.858,12.555 M1.858,8.87 M3.716,7.417 M3.716,7.808 M3.716,10.712\"/>\\\n<path style=\"fill:{{iconColor}};\" d=\"M17.709,13.616L17.709,13.616v0.781l3.715-3.685l-3.715-3.685v0.781l0,0V13.616z M17.709,13.616 M17.709,14.007 M19.566,12.555 M19.566,8.87 M17.709,7.417 M17.709,7.808 M17.709,10.712\"/>\\\n</g>\\\n<path style=\"fill-rule:evenodd;clip-rule:evenodd;fill:{{iconColor}};\" d=\"M10.712,6.608c2.267,0,4.104,1.838,4.104,4.104 c0,2.266-1.837,4.104-4.104,4.104c-2.266,0-4.104-1.837-4.104-4.104C6.608,8.446,8.446,6.608,10.712,6.608L10.712,6.608z M10.712,7.515c-1.765,0-3.196,1.432-3.196,3.197s1.432,3.197,3.196,3.197c1.766,0,3.197-1.432,3.197-3.197 S12.478,7.515,10.712,7.515z\"/>\\\n</g>\\\n</svg>',\n    iconColor: '#231F20',\n    hide: function() {\n    utils.hide(this.icon);\n},\n\n    show: function(el) {\n        if (el === this.icon && this.protectedElement === null) return;\n\n        this.element = el;\n\n        var style = this.icon.style,\n                left = el.offsetLeft,\n                top = el.offsetTop;\n\n        el.dragIcon = this.icon;\n        el.parentNode.appendChild(this.icon);\n\n        style.opacity = 1;\n        style.left = left + 'px';\n        style.top = top + 'px';\n\n        utils.show(this.icon);\n    },\n        cleanCanvas: function() {\n            var target,\n                    inserted = false,\n                    buttons = d.getElementsByClassName(this.buttonClass);\n\n            this.icon.style.opacity = 1;\n\n            while (buttons.length > 0) {\n                if (utils.isVisible(target = buttons[0])) {\n                    if (!inserted) {\n                        target.parentNode.insertBefore(this.element, target);\n                        inserted = true;\n                    }\n                    utils.detachNode(target);\n                }\n            }\n            utils.detachNode(this.icon);\n        }\n};\n\nMedium.Action = function () {\n};\nMedium.Action.prototype = {\n    setBridge: function (bridge) {\n        for (var i in bridge) if (bridge.hasOwnProperty(i)) {\n            this[i] = bridge[i];\n        }\n    },\n    listen: function () {\n        var el = this.element,\n                intercept = this.intercept;\n\n        utils\n        .addEvent(el, 'keyup', intercept.up)\n        .addEvent(el, 'keydown', intercept.down)\n        .addEvent(el, 'focus', intercept.focus)\n        .addEvent(el, 'blur', intercept.blur)\n        .addEvent(el, 'paste', this.settings.pasteEventHandler);\n    },\n    preserveElementFocus: function () {\n        // Fetch node that has focus\n        var anchorNode = w.getSelection ? w.getSelection().anchorNode : d.activeElement;\n        if (anchorNode) {\n            var cache = this.medium.cache,\n                    s = this.settings,\n                    cur = anchorNode.parentNode,\n                    children = s.element.children,\n                    diff = cur !== cache.focusedElement,\n                    elementIndex = 0,\n                    i;\n\n            // anchorNode is our target if element is empty\n            if (cur === s.element) {\n                cur = anchorNode;\n            }\n\n            // Find our child index\n            for (i = 0; i < children.length; i++) {\n                if (cur === children[i]) {\n                    elementIndex = i;\n                    break;\n                }\n            }\n\n            // Focused element is different\n            if (diff) {\n                cache.focusedElement = cur;\n                cache.focusedElementIndex = elementIndex;\n            }\n        }\n    }\n};\n\nMedium.Cache = function () {\n    this.initialized = false;\n    this.cmd = false;\n    this.focusedElement = null\n};\nMedium.Cache.prototype = {\n    setBridge: function (bridge) {\n        for (var i in bridge) if (bridge.hasOwnProperty(i)) {\n            this[i] = bridge[i];\n        }\n    }\n};\n\n//Modes\nMedium.inlineMode = 'inline';\nMedium.partialMode = 'partial';\nMedium.richMode = 'rich';\nMedium.inlineRichMode = 'inlineRich';\nMedium.Messages = {\n    pastHere: 'Paste Here'\n};\n\n//Behaviours\nMedium.domesticatedBehavior = 'domesticated';\nMedium.wildBehavior = 'wild';\n\nreturn Medium;\n}());\n\nif (typeof define === 'function' && define['amd']) {\n    define(function () { return Medium; });\n} else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Medium;\n} else if (typeof this !== 'undefined') {\n    this.Medium = Medium;\n}\n\n}).call(this, window, document);\n",
			"file": "/C/Users/Combocoputer/Desktop/rangy.js",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 81399,
				"line_ending": "Windows",
				"name": "/*"
			}
		},
		{
			"contents": "* {\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n}\n\n.toggled-true {\n    background-color: red;\n}\n\n.toggled-false {\n    color: rgba(0, 0, 0, .1);\n    color: rgba(20, 200, 150, .4);\n    background-color: white;\n}\n\n",
			"file": "/C/Users/Combocoputer/Documents/martijnbrekelmans/lines/style.css",
			"file_size": 163,
			"file_write_time": 130658276117978837,
			"settings":
			{
				"buffer_size": 214,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#platform \"uLCD-32PTU\"\n\n//              ___                     (_)                    _               ___                             _        _\n//     o O O   | _ \\    _ _    ___      | |    ___     __     | |_     ___    |   \\    ___    _ __     ___    | |_     (_)     __     __ _\n//    o        |  _/   | '_|  / _ \\    _/ |   / -_)   / _|    |  _|   |___|   | |) |  / _ \\  | '  \\   / _ \\   |  _|    | |    / _|   / _` |\n//   TS__[O]  _|_|_   _|_|_   \\___/   |__/_   \\___|   \\__|_   _\\__|   _____   |___/   \\___/  |_|_|_|  \\___/   _\\__|   _|_|_   \\__|_  \\__,_|\n//  {======|_| \"\"\" |_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|     |_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|\n// ./o--000'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\n\n/* Information:\n * Made by: Jasper van Meer & Job Douma\n * Screen Width = 320 : Screen Height = 240\n*/\n\n#platform \"uLCD-32PTU\"\n\n#inherit \"4DGL_16bitColours.fnc\"\n#inherit \"lcd.4dg\"\n#inherit \"I2C.4dg\"\n\n#constant TRUE 1\n#constant FALSE 0\n\n// Vars\nvar menuTabs := 5, listCount:= 0, infoCount := 0, counter := 0, consoleEnable := 0, currentForm := 0;\n// Set the size of the arrays sometime according to max\nvar menuItems[5] := [\"Menu\", \"Rooms\", \"Info\", \"Menu\", \"Menu\"]; // Menu Bar content String Array\nvar listItems[5] := [\"Menu\", \"List\", \"Info\", \"Menu\", \"Menu\"]; // List content String Array\nvar infoItems[8] := [\"Menu\", \"List\", \"Info\", \"Menu\", \"Menu\"]; // Info List content String Array\nvar msg := \"Message to be send to the slave\";\n// End Vars\n\nfunc main()\n    // Initializing Sequence\n    gfx_ScreenMode(LANDSCAPE_R);\n    touch_Set(TOUCH_ENABLE);\n    // End Initializing Sequence\n\n    defaultStartupForm();\n\n    // I2C Setup\n    /*\n    configureSPIslaveOnBridge();\n    gfx_Button(DOWN, 140, 110, BLACK, GRAY, FONT2, 2, 2, \"Starting Up.\"); //Show progression\n    sendViaI2C(msg); //Message has to be menaingfull...\n    gfx_Button(DOWN, 140, 110, BLACK, GRAY, FONT2, 2, 2, \"Starting Up..\"); //Show progression\n    expectingI2Cmsg();\n    gfx_Button(DOWN, 140, 110, BLACK, GRAY, FONT2, 2, 2, \"Starting Up...\"); //Show progression\n    */\n    // End I2C Setup\n\n    // Interpret msg from uC\n    //gfx_Button(DOWN, 140, 110, BLACK, GRAY, FONT2, 2, 2, \"Starting Up\"); //Show progression\n    // End Interpret msg from uC\n\n    // Generate Form\n    gfx_BGcolour(BLACK);\n    gfx_Cls();\n    makeMenuBar(menuTabs, menuItems);\n    // End generate Form\n\n    var a := 0;\n    repeat\n        a := getForm(); //Get what form is selected\n        if (currentForm != a)\n            getNewFormStyle();\n            if(a == MENU)\n                    makeMenuBar(menuTabs, menuItems);\n                    setFormItems(TRUE, FALSE, FALSE);\n            endif\n            if(a == ROOM)\n                   makeMenuBar(menuTabs, menuItems);\n                   makeMenuList(listCount, listItems);\n                   setFormItems(TRUE, TRUE, FALSE);\n            endif\n            if(a == INFO)\n                   makeInfoTable(infoCount, infoItems);\n                   setFormItems(FALSE, TRUE, FALSE);\n            endif\n            currentForm := a;\n        endif//endif Currenform != a\n        buttonListener();\n    forever\n\nendfunc\n\n// Display the standard Form for the startup sequence. In the instance that the font of the \"Starting up\"\n// text is WHITE, you can touch the display anywhere to enable the Console/Debug-Mode.\n// If the Console/Debug-Mode is enabled the Font of the text will turn to, and stay GRAY.\n// In the instance the screen is not touched, the chance/time the user has to enable the Console/Debug-Mode\n// will expire once the Font turns RED.\nfunc defaultStartupForm()\n    // Default Screen/Form\n    gfx_BGcolour(WHITE);\n    gfx_Cls();\n    gfx_Button(DOWN, 60, 80, BLACK, WHITE, FONT2, 2, 2, \"Starting Up\");\n    //Wait a bit for user ot press screen.\n    //If pressed within time the console will be enabled\n    while (counter < 30)\n        if (touch_Get(TOUCH_STATUS) == TOUCH_PRESSED)\n            consoleEnable := TRUE;\n            setConsoleEnable(consoleEnable);\n            gfx_Button(DOWN, 60, 80, BLACK, GRAY, FONT2, 2, 2, \"Starting Up\");//Show progression\n        endif\n        pause(100);\n        counter++;\n    wend\n    counter := 0;\n    if (consoleEnable) gfx_Button(DOWN, 60, 80, BLACK, GRAY, FONT2, 2, 2, \"Starting Up\");//Show progression\n    if (!consoleEnable) gfx_Button(DOWN, 60, 80, BLACK, RED, FONT2, 2, 2, \"Starting Up\"); //Show progression\n    // End Default Screen/Form\nendfunc\n\n// Send the message that is set via I2C to the slave and recieve the\n// newest data to construct a form to display the data on.\nfunc getNewFormStyle()\n    gfx_Cls(); //Clear screen to Black\n    gfx_Button(DOWN, 60, 80, WHITE, BLACK, FONT2, 2, 2, \"Getting data\"); //Show progression\n    if (consoleEnable) print(\"Sending message: \",msg,\"\\n\"); //Maybe change it so it works\n    sendViaI2C(msg);\n    gfx_Button(DOWN, 140, 110, WHITE, BLACK, FONT2, 2, 2, \"Getting data.\"); //Show progression\n    expectingI2Cmsg();\n    gfx_Button(DOWN, 140, 110, WHITE, BLACK, FONT2, 2, 2, \"Getting data..\"); //Show progression\n\n    // Interpret message and fill the arrays and counts accordingly\n\n    gfx_Cls();\nendfunc\n\n// Construct the message that is to be send via I2C using the constr\n// var as the keyword in said message\nfunc setMsg(var constr)\n    ///////////////\n    // overbodig -M //\n    ///////////////\n    msg := \"\"; // Clear message\n    msg := \"rq:\"; // Not definitive\n    str_Cat(&msg, constr);\n    if (consoleEnable) print(\"Set Message to: \",msg,\"\\n\"); //may change so it works\nendfunc\n\n// Get the string at the index of the array elected by the type var\n// This method is used in the GUI listener to prevent passing huge\n// amounts of data to other functions (in reality the processor is\n// copying all the data which is very unresourcefull) and keeping the\n// systemd modular. For a new datatype you will need to make far less\n// changes in the overall program using this method.\nfunc getContentAtIndexOfType(var type, var index)\n    if (type == MENU) return menuItems[index];\n    if (type == LIST) return listItems[index];\n    if (type == INFO) return infoItems[index];\nendfunc\n\n// Get the maximum index of one of the content array selected by the\n// type var. This prevents unresourcefullness and modularity at an\n// acceptable level.\nfunc getEndOfContentOfType(var type)\n    if (type == MENU) return menuTabs;\n    //////////////////////////////////////\n    // spelvout? listcount vs listCount -M//\n    //////////////////////////////////////\n    if (type == LIST) return listcount;\n    if (type == INFO) return infoCount;\nendfunc\n",
			"file": "/C/Users/Combocoputer/Downloads/ProjDom.4dg",
			"file_size": 6832,
			"file_write_time": 130660003514388939,
			"settings":
			{
				"buffer_size": 6668,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "var marginMenu = 10;\nvar menuButtonXPos = new Array(15);\nvar listButtonYPos = new Array(15);\nvar infoButtonYPos = new Array(15);\nvar marginList = 6;\nvar stringLengthList = 16;\nvar stringHeightInPixels = 0;\nvar form = 0;\n\nvar rendered = false;\n\nvar fontSize = 12;\n\nvar MENU = 0;\nvar ROOM = 1;\nvar LIST = 1;\nvar INFO = 2;\n\n// 4dgl bs\nvar TOUCH_RELEASED = 8;\n\nvar formHasMenuBar = true;\nvar formHasList = false;\nvar formHasInfoTable = false;\n\nctx.font = fontSize + \"px Lucida Console\";\n\n// projdom\nvar menuTabs = 5;\nvar listCount = 0;\nvar infoCount = 0;\nvar counter  = 0;\nvar currentForm = 0;\n\nvar msg = \"message to be sent\";\nvar menuItems = [\"Menu\", \"Rooms\", \"Info\", \"Menu\", \"Menu\"];\nvar listItems = [\"Menu\", \"List\", \"Info\", \"Menu\", \"Menu\"];\nvar infoItems = [\"Menu\", \"List\", \"Info\", \"Menu\", \"Menu\"];\n\nfunction strWidthPixels(string) {\n    return string.length * fontSize;\n}\n\nfunction makeMenuBar(tabs, strings) {\n    var x = 0;\n    var y = 0;\n    while (y < tabs) {\n        if (y > 0) {\n            x += strWidthPixels(strings[y]) + marginMenu;\n        }\n        ctx.fillText(strings[y], x, 20);\n        menuButtonXPos[y] = x;\n        y++;\n    }\n    menuButtonXPos[tabs] = x + strWidthPixels(strings[y - 1]);\n}\n\nfunction makeMenuList(listSize, stringArray) {\n    var y = 30;\n    var index = 0;\n    stringHeightInPixels = fontSize;\n    while (index < listSize) {\n        if (y >= 30 && y < 210) {\n            ctx.fillText(stringArray[index], 20, y);\n        }\n        listButtonYPos[index] = y;\n        y += stringHeightInPixels + marginList;\n        index++;\n    }\n    listButtonYPos[listSize] = y + stringHeightInPixels + marginList;\n}\n\nfunction makeInfoTable (tableCells, stringArray) {\n    var index = 0;\n    var ypos = 30;\n    while (index < tableCells) {\n        if (index % 2 === 0) {\n            ctx.fillText(stringArray[index], 20, ypos);\n        } else if (index % 2 === 1) {\n            ctx.fillText(stringArray[index], 158, ypos - fontSize - marginList);\n        }\n        ypos += fontSize + marginList;\n        infoButtonYPos[index] = ypos;\n        index++;\n    }\n    infoButtonYPos[tableCells] = ypos + stringHeightInPixels + marginList;\n}\n\nvar touches = (function () {\n    var mousedown = false;\n    var x = 0;\n    var y = 0;\n    \n    canvas.addEventListener(\"mousedown\", function () {\n        mousedown = true;\n    });\n    \n    canvas.addEventListener(\"mouseup\", function () {\n        mousedown = false;\n    });\n\n    canvas.addEventListener(\"mousemove\", function (event) {\n        x = event.layerX;\n        y = event.layerY;\n    });\n\n    return {\n        touching: function () {\n            return mousedown;   \n        },\n        x: function () {\n            return x;\n        },\n        y: function () {\n            return y;\n        }\n    };    \n}());\n\n\nvar touching = touches.touching;\nvar getXCoord = touches.x;\nvar getYCoord = touches.y;\n\nfunction setMsg (constr) {\n    // kan mocken met een kv-storage\n    msg = \"rg:\";\n    msg += constr;\n    return \"bla\";\n}\n\nfunction setFormItems (menuBar, menuList, infoTable) {\n    formHasMenuBar = menuBar;\n    formHasList = menuList;\n    formHasInfoTable = infoTable;\n}\n\nfunction getForm () {\n    return form;\n}\n\nfunction getEndOfContentOfType (type) {\n    if (type === MENU) {return menuTabs;}\n    if (type === LIST) {return listCount;}\n    if (type === INFO) {return infoCount;}\n}\n\nfunction getContentAtIndexOfType(type, index) {\n    if (type === MENU) {return menuItems[index];}\n    if (type === LIST) {return listItems[index];}\n    if (type === INFO) {return infoItems[index];}\n}\n\nfunction waitForSomething (predicate, execute) {\n  if (predicate()) {\n    setTimeout(function () {\n        waitForSomething(predicate, execute);\n    }, 1);\n  } else {\n       execute();\n  }\n}\n\nfunction buttonListener () {\n    var x = 0;\n    var eoc = 0;\n    var xcoord = 0;\n    var ycoord = 0;\n    var string = \"String\";\n    \n    if (touching()) {\n        ycoord = getYCoord();\n        xcoord = getXCoord();\n        \n        eoc = getEndOfContentOfType(MENU);\n        for (x = 0; x < eoc; x++) {\n            if (xcoord >= menuButtonXPos[x] && xcoord <= menuButtonXPos[x + 1] && ycoord < 30) {\n                string = getContentAtIndexOfType(MENU, x);\n                ctx.fillText(string, menuButtonXPos[x], 0);\n                waitForSomething(function () {\n                    return !touching();\n                }, function () {\n                    ctx.fillStyle = \"green\";\n                    ctx.fillText(string, menuButtonXPos[x], 0);\n                    ctx.fillStyle = \"black\";\n\n                    form = x;\n                    setMsg(string);\n                });\n            }\n        }\n    }\n}\n\nfunction main () {\n    var a = 0;\n    setInterval(function () {\n        a = getForm();\n        if (currentForm !== a || !rendered) {\n            rendered = true;\n            if (a === MENU) {\n                makeMenuBar(menuTabs, menuItems);\n                setFormItems(true, false, false);\n            } else if (a === ROOM) {\n                makeMenuBar(menuTabs, menuItems);\n                makeMenuList(listCount, listItems);\n                setFormItems(true, true, false);\n            } else if (a === INFO) {\n                makeInfoTable(infoCount, infoItems);\n                setFormItems(false, true, false);\n            }\n            currentForm = a;\n        } \n        buttonListener();\n    }, 10);        \n}\n\nmain();",
			"settings":
			{
				"buffer_size": 5378,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Combocoputer/Documents/javascript/natural editor/editor.js",
			"settings":
			{
				"buffer_size": 7211,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/*\n * Medium.js\n *\n * Copyright 2013-2014, Jacob Kelley - http://jakiestfu.com/\n * Released under the MIT Licence\n * http://opensource.org/licenses/MIT\n *\n * Github:    http://github.com/jakiestfu/Medium.js/\n * Version: master\n */\n\n(function (w, d) {\n\n    'use strict';\n\n    var Medium = (function () {\n        //two modes, wild (native) or domesticated (rangy + undo.js)\n        var rangy = w['rangy'] || null;\n        var undo = w['Undo'] || null;\n        var wild = (!rangy || !undo);\n        var domesticated = (!wild);\n        var key = w.Key = {\n            'backspace': 8,\n            'tab': 9,\n            'enter': 13,\n            'shift': 16,\n            'ctrl': 17,\n            'alt': 18,\n            'pause': 19,\n            'capsLock': 20,\n            'escape': 27,\n            'pageUp': 33,\n            'pageDown': 34,\n            'end': 35,\n            'home': 36,\n            'leftArrow': 37,\n            'upArrow': 38,\n            'rightArrow': 39,\n            'downArrow': 40,\n            'insert': 45,\n            'delete': 46,\n            '0': 48,\n            '1': 49,\n            '2': 50,\n            '3': 51,\n            '4': 52,\n            '5': 53,\n            '6': 54,\n            '7': 55,\n            '8': 56,\n            '9': 57,\n            'a': 65,\n            'b': 66,\n            'c': 67,\n            'd': 68,\n            'e': 69,\n            'f': 70,\n            'g': 71,\n            'h': 72,\n            'i': 73,\n            'j': 74,\n            'k': 75,\n            'l': 76,\n            'm': 77,\n            'n': 78,\n            'o': 79,\n            'p': 80,\n            'q': 81,\n            'r': 82,\n            's': 83,\n            't': 84,\n            'u': 85,\n            'v': 86,\n            'w': 87,\n            'x': 88,\n            'y': 89,\n            'z': 90,\n            'leftWindow': 91,\n            'rightWindowKey': 92,\n            'select': 93,\n            'numpad0': 96,\n            'numpad1': 97,\n            'numpad2': 98,\n            'numpad3': 99,\n            'numpad4': 100,\n            'numpad5': 101,\n            'numpad6': 102,\n            'numpad7': 103,\n            'numpad8': 104,\n            'numpad9': 105,\n            'multiply': 106,\n            'add': 107,\n            'subtract': 109,\n            'decimalPoint': 110,\n            'divide': 111,\n            'f1': 112,\n            'f2': 113,\n            'f3': 114,\n            'f4': 115,\n            'f5': 116,\n            'f6': 117,\n            'f7': 118,\n            'f8': 119,\n            'f9': 120,\n            'f10': 121,\n            'f11': 122,\n            'f12': 123,\n            'numLock': 144,\n            'scrollLock': 145,\n            'semiColon': 186,\n            'equalSign': 187,\n            'comma': 188,\n            'dash': 189,\n            'period': 190,\n            'forwardSlash': 191,\n            'graveAccent': 192,\n            'openBracket': 219,\n            'backSlash': 220,\n            'closeBraket': 221,\n            'singleQuote': 222\n        };\n\n        /**\n        * Medium.js - Taking control of content editable\n        * @constructor\n        * @param {Object} [userSettings] user options\n        */\n        var Medium = function (userSettings) {\n            var medium        = this;\n            var action        = new Medium.Action();\n            var cache         = new Medium.Cache();\n            var cursor        = new Medium.Cursor();\n            var selection = new Medium.Selection();\n            var intercept = {\n                focus: function (e) {\n                    e = e || w.event;\n                    Medium.activeElement = el;\n                    medium.placeholders();\n                },\n                blur: function (e) {\n                    e = e || w.event;\n                    if (Medium.activeElement === el) {\n                        Medium.activeElement = null;\n                    }\n                    medium.placeholders();\n                },\n                down: function (e) {\n                    e = e || w.event;\n\n                    var keepEvent = true;\n\n                    //in Chrome it sends out this event before every regular event, not sure why\n                    if (e.keyCode === 229) return;\n\n                    utils.isCommand(settings, e, function () {\n                        cache.cmd = true;\n                    }, function () {\n                        cache.cmd = false;\n                    });\n\n                    utils.isShift(e, function () {\n                        cache.shift = true;\n                    }, function () {\n                        cache.shift = false;\n                    });\n\n                    utils.isModifier(settings, e, function (cmd) {\n                        if (cache.cmd) {\n\n                            if (( (settings.mode === Medium.inlineMode) || (settings.mode === Medium.partialMode) ) && cmd !== \"paste\") {\n                                utils.preventDefaultEvent(e);\n                                return;\n                            }\n\n                            var cmdType = typeof cmd;\n                            var fn = null;\n                            if (cmdType === \"function\") {\n                                fn = cmd;\n                            } else {\n                                fn = intercept.command[cmd];\n                            }\n\n                            keepEvent = fn.call(medium, e);\n\n                            if (keepEvent === false) {\n                                utils.preventDefaultEvent(e);\n                                utils.stopPropagation(e);\n                            }\n                        }\n                    });\n\n                    if (settings.maxLength !== -1) {\n                        var len = utils.text().length,\n                                hasSelection = false,\n                                selection = w.getSelection();\n\n                        if (selection) {\n                            hasSelection = !selection.isCollapsed;\n                        }\n\n                        if (len >= settings.maxLength && !utils.isSpecial(e) && !utils.isNavigational(e) && !hasSelection) {\n                            settings.maxLengthReached(settings.element)\n                            return utils.preventDefaultEvent(e);\n                        }\n                    }\n\n                    switch (e.keyCode) {\n                        case key['enter']:\n                            intercept.enterKey(e);\n                            break;\n                        case key['backspace']:\n                        case key['delete']:\n                            intercept.backspaceOrDeleteKey(e);\n                            break;\n                    }\n\n                    return keepEvent;\n                },\n                up: function (e) {\n                    e = e || w.event;\n                    utils.isCommand(settings, e, function () {\n                        cache.cmd = false;\n                    }, function () {\n                        cache.cmd = true;\n                    });\n                    medium.clean();\n                    medium.placeholders();\n\n                    //here we have a key context, so if you need to create your own object within a specific context it is doable\n                    var keyContext;\n                    if (\n                        settings.keyContext !== null\n                        && ( keyContext = settings.keyContext[e.keyCode] )\n                    ) {\n                        var el = cursor.parent();\n\n                        if (el) {\n                            keyContext.call(medium, e, el);\n                        }\n                    }\n\n                    action.preserveElementFocus();\n                },\n                command: {\n                    bold: function (e) {\n                        utils.preventDefaultEvent(e);\n                        (new Medium.Element(medium, 'bold'))\n                        .setClean(false)\n                        .invoke(settings.beforeInvokeElement);\n                    },\n                    underline: function (e) {\n                        utils.preventDefaultEvent(e);\n                        (new Medium.Element(medium, 'underline'))\n                        .setClean(false)\n                        .invoke(settings.beforeInvokeElement);\n                    },\n                    italicize: function (e) {\n                        utils.preventDefaultEvent(e);\n                        (new Medium.Element(medium, 'italic'))\n                        .setClean(false)\n                        .invoke(settings.beforeInvokeElement);\n                    },\n                    quote: function (e) {\n                    },\n                    paste: function (e) {\n                        medium.makeUndoable();\n                        if (settings.pasteAsText) {\n                            var sel = utils.selection.saveSelection();\n                            utils.pasteHook(function (text) {\n                                utils.selection.restoreSelection(sel);\n\n                                text = text.replace(/\\n/g, '<br>');\n\n                                (new Medium.Html(medium, text))\n                                .setClean(false)\n                                .insert(settings.beforeInsertHtml, true);\n\n                                medium.clean();\n                                medium.placeholders();\n                            });\n                        } else {\n                            medium.clean();\n                            medium.placeholders();\n                        }\n                    }\n                },\n                enterKey: function (e) {\n                    if( settings.mode === Medium.inlineMode || settings.mode === Medium.inlineRichMode ){\n                        return utils.preventDefaultEvent(e);\n                    }\n\n                    if (cache.shift) {\n                        if (settings.tags['break']) {\n                            utils.preventDefaultEvent(e);\n                            medium.addTag(settings.tags['break'], true);\n                            return false;\n                        }\n\n                    } else {\n\n                        var focusedElement = utils.atCaret(medium) || {},\n                                children = el.children,\n                                lastChild = focusedElement === el.lastChild ? el.lastChild : null,\n                                makeHR,\n                                secondToLast,\n                                paragraph;\n\n                        if (\n                            lastChild\n                            && lastChild !== el.firstChild\n                            && settings.autoHR\n                            && settings.mode !== 'partial'\n                            && settings.tags.horizontalRule\n                        ) {\n\n                            utils.preventDefaultEvent(e);\n\n                            makeHR =\n                                utils.text(lastChild) === \"\"\n                            && lastChild.nodeName.toLowerCase() === settings.tags.paragraph;\n\n                            if (makeHR && children.length >= 2) {\n                                secondToLast = children[ children.length - 2 ];\n\n                                if (secondToLast.nodeName.toLowerCase() === settings.tags.horizontalRule) {\n                                    makeHR = false;\n                                }\n                            }\n\n                            if (makeHR) {\n                                medium.addTag(settings.tags.horizontalRule, false, true, focusedElement);\n                                focusedElement = focusedElement.nextSibling;\n                            }\n\n                            if ((paragraph = medium.addTag(settings.tags.paragraph, true, null, focusedElement)) !== null) {\n                                paragraph.innerHTML = '';\n                                cursor.set(medium, 0, paragraph);\n                            }\n                        }\n                    }\n\n                    return true;\n                },\n                backspaceOrDeleteKey: function (e) {\n                    if (settings.onBackspaceOrDelete !== undefined) {\n                        var result = settings.onBackspaceOrDelete.call(medium, e, el);\n\n                        if (result) {\n                            return;\n                        }\n                    }\n\n                    if (el.lastChild === null) return;\n\n                    var lastChild = el.lastChild,\n                            beforeLastChild = lastChild.previousSibling;\n\n                    if (\n                        lastChild\n                        && settings.tags.horizontalRule\n                        && lastChild.nodeName.toLocaleLowerCase() === settings.tags.horizontalRule\n                    ) {\n                        el.removeChild(lastChild);\n                    } else if (\n                        lastChild\n                        && beforeLastChild\n                        && utils.text(lastChild).length < 1\n\n                        && beforeLastChild.nodeName.toLowerCase() === settings.tags.horizontalRule\n                        && lastChild.nodeName.toLowerCase() === settings.tags.paragraph\n                    ) {\n                        el.removeChild(lastChild);\n                        el.removeChild(beforeLastChild);\n                    }\n                }\n            };\n            var defaultSettings = {\n                element: null,\n                modifier: 'auto',\n                placeholder: \"\",\n                autofocus: false,\n                autoHR: true,\n                mode: Medium.richMode,\n                maxLength: -1,\n                modifiers: {\n                    'b': 'bold',\n                    'i': 'italicize',\n                    'u': 'underline',\n                    'v': 'paste'\n                },\n                tags: {\n                    'break': 'br',\n                    'horizontalRule': 'hr',\n                    'paragraph': 'p',\n                    'outerLevel': ['pre', 'blockquote', 'figure'],\n                    'innerLevel': ['a', 'b', 'u', 'i', 'img', 'strong']\n                },\n                cssClasses: {\n                    editor: 'Medium',\n                    pasteHook: 'Medium-paste-hook',\n                    placeholder: 'Medium-placeholder',\n                    clear: 'Medium-clear'\n                },\n                attributes: {\n                    remove: ['style', 'class']\n                },\n                pasteAsText: true,\n                beforeInvokeElement: function () {\n                    //this = Medium.Element\n                },\n                beforeInsertHtml: function () {\n                    //this = Medium.Html\n                },\n                maxLengthReached: function (element) {\n                    //element\n                },\n                beforeAddTag: function (tag, shouldFocus, isEditable, afterElement) {\n                },\n                keyContext: null,\n                pasteEventHandler: function(e) {\n                    e = e || w.event;\n                    medium.makeUndoable();\n                    var length = medium.value().length,\n                            totalLength;\n\n                    if (settings.pasteAsText) {\n                        utils.preventDefaultEvent(e);\n                        var\n                        sel = utils.selection.saveSelection(),\n                                text = prompt(Medium.Messages.pastHere) || '';\n\n                        if (text.length > 0) {\n                            el.focus();\n                            Medium.activeElement = el;\n                            utils.selection.restoreSelection(sel);\n\n                            //encode the text first\n                            text = utils.encodeHtml(text);\n\n                            //cut down it's length\n                            totalLength = text.length + length;\n                            if (settings.maxLength > 0 && totalLength > settings.maxLength) {\n                                text = text.substring(0, settings.maxLength - length);\n                            }\n\n                            if (settings.mode !== Medium.inlineMode) {\n                                text = text.replace(/\\n/g, '<br>');\n                            }\n\n                            (new Medium.Html(medium, text))\n                            .setClean(false)\n                            .insert(settings.beforeInsertHtml, true);\n\n                            medium.clean();\n                            medium.placeholders();\n\n                            return false;\n                        }\n                    } else {\n                        setTimeout(function() {\n                            medium.clean();\n                            medium.placeholders();\n                        }, 20);\n                    }\n                },\n                drag: false\n            };\n            var settings = utils.deepExtend(defaultSettings, userSettings);\n            var el;\n            var newVal;\n            var i;\n            var bridge = {};\n            var drag;\n\n            for (i in defaultSettings) if (defaultSettings.hasOwnProperty(i)) {\n                // Override defaults with data-attributes\n                if (\n                    typeof defaultSettings[i] !== 'object'\n                    && defaultSettings.hasOwnProperty(i)\n                    && settings.element.getAttribute('data-medium-' + key)\n                ) {\n                    newVal = settings.element.getAttribute('data-medium-' + key);\n\n                    if (newVal.toLowerCase() === \"false\" || newVal.toLowerCase() === \"true\") {\n                        newVal = newVal.toLowerCase() === \"true\";\n                    }\n                    settings[i] = newVal;\n                }\n            }\n\n            if (settings.modifiers) {\n                for (i in settings.modifiers) {\n                    if (typeof(key[i]) !== 'undefined') {\n                        settings.modifiers[key[i]] = settings.modifiers[i];\n                    }\n                }\n            }\n\n            if (settings.keyContext) {\n                for (i in settings.keyContext) {\n                    if (typeof(key[i]) !== 'undefined') {\n                        settings.keyContext[key[i]] = settings.keyContext[i];\n                    }\n                }\n            }\n\n            // Extend Settings\n            el = settings.element;\n\n            // Editable\n            el.contentEditable = true;\n            el.className += (' ' + settings.cssClasses.editor) + (' ' + settings.cssClasses.editor + '-' + settings.mode);\n\n            settings.tags = (settings.tags || {});\n            if (settings.tags.outerLevel) {\n                settings.tags.outerLevel = settings.tags.outerLevel.concat([settings.tags.paragraph, settings.tags.horizontalRule]);\n            }\n\n            this.settings = settings;\n            this.element = el;\n            this.intercept = intercept;\n\n            this.action = action;\n            this.cache = cache;\n            this.cursor = cursor;\n            this.utils = utils;\n            this.selection = selection;\n\n            bridge.element = el;\n            bridge.medium = this;\n            bridge.settings = settings;\n\n            bridge.action = action;\n            bridge.cache = cache;\n            bridge.cursor = cursor;\n            bridge.intercept = intercept;\n            bridge.utils = utils;\n            bridge.selection = selection;\n\n            action.setBridge(bridge);\n            cache.setBridge(bridge);\n            cursor.setBridge(bridge);\n            selection.setBridge(bridge);\n\n            // Initialize editor\n            medium.clean();\n            medium.placeholders();\n            action.preserveElementFocus();\n\n            // Capture Events\n            action.listen();\n\n            if (wild) {\n                this.makeUndoable = function () {\n                };\n            } else {\n                this.dirty        = false;\n                this.undoable     = new Medium.Undoable(this);\n                this.undo         = this.undoable.undo;\n                this.redo         = this.undoable.redo;\n                this.makeUndoable = this.undoable.makeUndoable;\n            }\n\n            if (settings.drag) {\n                drag = medium.drag = new Medium.Drag(medium);\n\n                utils.addEvent(el, 'mousemove', function(e) {\n                    e = e || w.event;\n                    var target = e.target || {};\n\n                    if (target.getAttribute('contenteditable') === 'false') {\n                        drag.show(target);\n                    }\n                });\n            }\n\n            el.medium = this;\n\n            // Set as initialized\n            cache.initialized = true;\n        };\n        var utils;\n\n        Medium.prototype = {\n            placeholders: function () {\n                //in IE8, just gracefully degrade to no placeholders\n                if (!w.getComputedStyle) return;\n\n                function qStyle (prop) {\n                    return elStyle.getPropertyValue(prop);\n                }\n\n                var that        = this;\n                var s           = this.settings;\n                var placeholder = this.placeholder || (this.placeholder = d.createElement('div'));\n                var el          = this.element;\n                var cursor      = this.cursor;\n                var style       = placeholder.style;\n                var elStyle     = w.getComputedStyle(el, null);\n                var text        = utils.text(el);\n                var childCount  = el.children.length;\n                var hasFocus    = Medium.activeElement === el;\n\n                el.placeholder = placeholder;\n\n                // Empty Editor\n                if (!hasFocus && text.length < 1 && childCount < 2) {\n                    if (el.placeHolderActive) return;\n\n                    if (!el.innerHTML.match('<' + s.tags.paragraph)) {\n                        el.innerHTML = '';\n                    }\n\n                    // We need to add placeholders\n                    if (s.placeholder.length > 0) {\n                        if (!placeholder.setup) {\n                            placeholder.setup       = true;\n\n                            //background & background color\n                            style.background        = qStyle('background');\n                            style.backgroundColor   = qStyle('background-color');\n\n                            //text size & text color\n                            style.fontSize          = qStyle('font-size');\n                            style.color             = elStyle.color;\n\n                            //begin box-model\n                            //margin\n                            style.marginTop         = qStyle('margin-top');\n                            style.marginBottom      = qStyle('margin-bottom');\n                            style.marginLeft        = qStyle('margin-left');\n                            style.marginRight       = qStyle('margin-right');\n\n                            //padding\n                            style.paddingTop        = qStyle('padding-top');\n                            style.paddingBottom     = qStyle('padding-bottom');\n                            style.paddingLeft       = qStyle('padding-left');\n                            style.paddingRight      = qStyle('padding-right');\n\n                            //border\n                            style.borderTopWidth    = qStyle('border-top-width');\n                            style.borderTopColor    = qStyle('border-top-color');\n                            style.borderTopStyle    = qStyle('border-top-style');\n                            style.borderBottomWidth = qStyle('border-bottom-width');\n                            style.borderBottomColor = qStyle('border-bottom-color');\n                            style.borderBottomStyle = qStyle('border-bottom-style');\n                            style.borderLeftWidth   = qStyle('border-left-width');\n                            style.borderLeftColor   = qStyle('border-left-color');\n                            style.borderLeftStyle   = qStyle('border-left-style');\n                            style.borderRightWidth  = qStyle('border-right-width');\n                            style.borderRightColor  = qStyle('border-right-color');\n                            style.borderRightStyle  = qStyle('border-right-style');\n                            //end box model\n\n                            //element setup\n                            placeholder.className   = s.cssClasses.placeholder + ' ' + s.cssClasses.placeholder + '-' + s.mode;\n                            placeholder.innerHTML   = '<div>' + s.placeholder + '</div>';\n                            el.parentNode.insertBefore(placeholder, el);\n                        }\n\n                        el.className += ' ' + s.cssClasses.clear;\n\n                        style.display = '';\n                        // Add base P tag and do auto focus, give it a min height if el has one\n                        style.minHeight = el.clientHeight + 'px';\n                        style.minWidth = el.clientWidth + 'px';\n\n                        if ( s.mode !== Medium.inlineMode && s.mode !== Medium.inlineRichMode ) {\n                            this.setupContents();\n\n                            if (childCount === 0 && el.firstChild) {\n                                cursor.set(this, 0, el.firstChild);\n                            }\n                        }\n                    }\n                    el.placeHolderActive = true;\n                } else if (el.placeHolderActive) {\n                    el.placeHolderActive = false;\n                    style.display = 'none';\n                    el.className = utils.trim(el.className.replace(s.cssClasses.clear, ''));\n                    this.setupContents();\n                }\n            },\n\n            /**\n            * Cleans element\n            * @param {HtmlElement} [el] default is settings.element\n            */\n            clean: function (el) {\n\n                /*\n                * Deletes invalid nodes\n                * Removes Attributes\n                */\n                var attr;\n                var text;\n                var j;\n                var s                  = this.settings;\n                var html               = this.html;\n                var placeholderClass   = s.cssClasses.placeholder;\n                var attributesToRemove = (s.attributes || {}).remove || [];\n                var tags               = s.tags || {};\n                var onlyOuter          = tags.outerLevel || null;\n                var onlyInner          = tags.innerLevel || null;\n                var outerSwitch        = {};\n                var innerSwitch        = {};\n                var paragraphTag       = (tags.paragraph || '').toUpperCase();\n\n                el = el || s.element;\n\n                if (s.mode === Medium.inlineRichMode) {\n                    onlyOuter = s.tags.innerLevel;\n                }\n\n                if (onlyOuter !== null) {\n                    for (j = 0; j < onlyOuter.length; j++) {\n                        outerSwitch[onlyOuter[j].toUpperCase()] = true;\n                    }\n                }\n\n                if (onlyInner !== null) {\n                    for (j = 0; j < onlyInner.length; j++) {\n                        innerSwitch[onlyInner[j].toUpperCase()] = true;\n                    }\n                }\n\n                utils.traverseAll(el, {\n                    element: function(child, i, depth, parent) {\n                        var nodeName = child.nodeName,\n                                shouldDelete = true;\n\n                        // Remove attributes\n                        for (j = 0; j < attributesToRemove.length; j++) {\n                            attr = attributesToRemove[j];\n                            if (child.hasAttribute(attr)) {\n                                if (child.getAttribute(attr) !== placeholderClass) {\n                                    child.removeAttribute(attr);\n                                }\n                            }\n                        }\n\n                        if ( onlyOuter === null && onlyInner === null ) {\n                            return;\n                        }\n\n                        if (depth    === 1 && outerSwitch[nodeName] !== undefined) {\n                            shouldDelete = false;\n                        } else if (depth > 1 && innerSwitch[nodeName] !== undefined) {\n                            shouldDelete = false;\n                        }\n\n                        // Convert tags or delete\n                        if (shouldDelete) {\n                            if (w.getComputedStyle(child, null).getPropertyValue('display') === 'block') {\n                                if (paragraphTag.length > 0 && paragraphTag !== nodeName) {\n                                    utils.changeTag(child, paragraphTag);\n                                }\n\n                                if (depth > 1) {\n                                    while (parent.childNodes.length > i) {\n                                        parent.parentNode.insertBefore(parent.lastChild, parent.nextSibling);\n                                    }\n                                }\n                            } else {\n                                switch (nodeName) {\n                                    case 'BR':\n                                        if (child === child.parentNode.lastChild) {\n                                            if (child === child.parentNode.firstChild) {\n                                                break;\n                                            }\n                                            text = document.createTextNode(\"\");\n                                            text.innerHTML = '&nbsp';\n                                            child.parentNode.insertBefore(text, child);\n                                            break;\n                                        }\n                                    default:\n                                        while (child.firstChild !== null) {\n                                            child.parentNode.insertBefore(child.firstChild, child);\n                                        }\n                                        utils.detachNode(child);\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                });\n            },\n\n            /**\n            *\n            * @param {String|Object} html\n            * @param {Function} [callback]\n            * @param {Boolean} [skipChangeEvent]\n            * @returns {Medium}\n            */\n            insertHtml: function (html, callback, skipChangeEvent) {\n                var result = (new Medium.Html(this, html)).insert(this.settings.beforeInsertHtml);\n                if (skipChangeEvent === true) {\n                    utils.triggerEvent(this.element, \"change\");\n                }\n                if (callback) {\n                    callback.apply(result);\n                }\n                return this;\n            },\n\n            addTag: function (tag, shouldFocus, isEditable, afterElement) {\n                if (!this.settings.beforeAddTag(tag, shouldFocus, isEditable, afterElement)) {\n                    var newEl = d.createElement(tag),\n                            toFocus;\n\n                    if (typeof isEditable !== \"undefined\" && isEditable === false) {\n                        newEl.contentEditable = false;\n                    }\n                    if (newEl.innerHTML.length == 0) {\n                        newEl.innerHTML = ' ';\n                    }\n                    if (afterElement && afterElement.nextSibling) {\n                        afterElement.parentNode.insertBefore(newEl, afterElement.nextSibling);\n                        toFocus = afterElement.nextSibling;\n\n                    } else {\n                        this.element.appendChild(newEl);\n                        toFocus = this.lastChild();\n                    }\n\n                    if (shouldFocus) {\n                        this.cache.focusedElement = toFocus;\n                        this.cursor.set(this, 0, toFocus);\n                    }\n                    return newEl;\n                }\n                return null;\n            },\n\n            /**\n                         *\n                         * @param {String} tagName\n                         * @param {Object} [attributes]\n                         * @param {Boolean} [skipChangeEvent]\n                         * @returns {Medium}\n                         */\n            invokeElement: function (tagName, attributes, skipChangeEvent) {\n                var settings = this.settings,\n                        attributes = attributes || {},\n                        remove = attributes.remove || [];\n\n                switch (settings.mode) {\n                    case Medium.inlineMode:\n                    case Medium.partialMode:\n                        return this;\n                    default:\n                }\n\n                //invoke works off class, so if it isn't there, we just add it\n                if (remove.length > 0) {\n                    if (!utils.arrayContains(settings, 'class')) {\n                        remove.push('class');\n                    }\n                }\n\n                (new Medium.Element(this, tagName, attributes))\n                .invoke(this.settings.beforeInvokeElement);\n\n                if (skipChangeEvent === true) {\n                    utils.triggerEvent(this.element, \"change\");\n                }\n\n                return this;\n            },\n\n            /**\n                         * @returns {string}\n                         */\n            behavior: function () {\n                return (wild ? Medium.wildBehavior : Medium.domesticatedBehavior);\n            },\n\n            /**\n                         *\n                         * @param value\n                         * @returns {Medium}\n                         */\n            value: function (value) {\n                if (typeof value !== 'undefined') {\n                    this.element.innerHTML = value;\n\n                    this.clean();\n                    this.placeholders();\n                } else {\n                    return this.element.innerHTML;\n                }\n\n                return this;\n            },\n\n            /**\n                         * Focus on element\n                         * @returns {Medium}\n                         */\n            focus: function () {\n                var el = this.element;\n                el.focus();\n                return this;\n            },\n\n            /**\n                         * Select all text\n                         * @returns {Medium}\n                         */\n            select: function () {\n                var el = this.element,\n                        range,\n                        selection;\n\n                el.focus();\n\n                if (d.body.createTextRange) {\n                    range = d.body.createTextRange();\n                    range.moveToElementText(el);\n                    range.select();\n                } else if (w.getSelection) {\n                    selection = w.getSelection();\n                    range = d.createRange();\n                    range.selectNodeContents(el);\n                    selection.removeAllRanges();\n                    selection.addRange(range);\n                }\n\n                return this;\n            },\n\n            isActive: function () {\n                return (Medium.activeElement === this.element);\n            },\n\n            setupContents: function () {\n                var el = this.element,\n                        children = el.children,\n                        childNodes = el.childNodes,\n                        initialParagraph,\n                        s = this.settings;\n\n                if (\n                    !s.tags.paragraph\n                    || children.length > 0\n                    || s.mode === Medium.inlineMode\n                    || s.mode === Medium.inlineRichMode\n                ) {\n                    return Medium.Utilities;\n                }\n\n                //has content, but no children\n                if (childNodes.length > 0) {\n                    initialParagraph = d.createElement(s.tags.paragraph);\n                    if (el.innerHTML.match('^[&]nbsp[;]')) {\n                        el.innerHTML = el.innerHTML.substring(6, el.innerHTML.length - 1);\n                    }\n                    initialParagraph.innerHTML = el.innerHTML;\n                    el.innerHTML = '';\n                    el.appendChild(initialParagraph);\n                    this.cursor.set(this, initialParagraph.innerHTML.length, initialParagraph);\n                } else {\n                    initialParagraph = d.createElement(s.tags.paragraph);\n                    initialParagraph.innerHTML = '&nbsp;';\n                    el.appendChild(initialParagraph);\n                }\n\n                return this;\n            },\n\n            destroy: function () {\n                var el = this.element,\n                        intercept = this.intercept,\n                        settings = this.settings,\n                        placeholder = this.placeholder || null;\n\n                if (placeholder !== null && placeholder.setup) {\n                    //remove placeholder\n                    placeholder.parentNode.removeChild(placeholder);\n                    delete el.placeHolderActive;\n                }\n\n                //remove contenteditable\n                el.removeAttribute('contenteditable');\n\n                //remove classes\n                el.className = utils.trim(el.className\n                                                                    .replace(settings.cssClasses.editor, '')\n                                                                    .replace(settings.cssClasses.clear, '')\n                                                                    .replace(settings.cssClasses.editor + '-' + settings.mode, ''));\n\n                //remove events\n                utils\n                .removeEvent(el, 'keyup', intercept.up)\n                .removeEvent(el, 'keydown', intercept.down)\n                .removeEvent(el, 'focus', intercept.focus)\n                .removeEvent(el, 'blur', intercept.focus)\n                .removeEvent(el, 'paste', settings.pasteEventHandler);\n            },\n\n            // Clears the element and restores the placeholder\n            clear: function () {\n                this.element.innerHTML = '';\n                this.placeholders();\n            },\n\n            /**\n                         * Splits content in medium element at cursor\n                         * @returns {DocumentFragment|null}\n                         */\n            splitAtCaret: function() {\n                if (!this.isActive()) return null;\n\n                var selector = (w.getSelection || d.selection),\n                        sel = selector(),\n                        offset = sel.focusOffset,\n                        node = sel.focusNode,\n                        el = this.element,\n                        range = d.createRange(),\n                        endRange = d.createRange(),\n                        contents;\n\n                range.setStart(node, offset);\n                endRange.selectNodeContents(el);\n                range.setEnd(endRange.endContainer, endRange.endOffset);\n\n                contents = range.extractContents();\n\n                return contents;\n            },\n\n            /**\n                         * Deletes selection\n                         */\n            deleteSelection: function() {\n                if (!this.isActive()) return;\n\n                var sel = rangy.getSelection(),\n                        range;\n\n                if (sel.rangeCount > 0) {\n                    range = sel.getRangeAt(0);\n                    range.deleteContents();\n                }\n            },\n\n            lastChild: function () {\n                return this.element.lastChild;\n            }\n        };\n\n        /**\n                 * @param {Medium} medium\n                 * @param {String} tagName\n                 * @param {Object} [attributes]\n                 * @constructor\n                 */\n        Medium.Element = function (medium, tagName, attributes) {\n            this.medium = medium;\n            this.element = medium.settings.element;\n            if (wild) {\n                this.tagName = tagName;\n            } else {\n                switch (tagName.toLowerCase()) {\n                    case 'bold':\n                        this.tagName = 'b';\n                        break;\n                    case 'italic':\n                        this.tagName = 'i';\n                        break;\n                    case 'underline':\n                        this.tagName = 'u';\n                        break;\n                    default:\n                        this.tagName = tagName;\n                }\n            }\n            this.attributes = attributes || {};\n            this.clean = true;\n        };\n\n\n        /**\n        * @constructor\n        * @param {Medium} medium\n        * @param {String|HtmlElement} html\n        */\n        Medium.Html = function (medium, html) {\n            this.medium = medium;\n            this.element = medium.settings.element;\n            this.clean = true;\n        };\n\n        /**\n        *\n        * @constructor\n        */\n        Medium.Injector = function () {\n        };\n\n        if (wild) {\n            Medium.Element.prototype = {\n                /**\n                                 * @methodOf Medium.Element\n                                 * @param {Function} [fn]\n                                 */\n                invoke: function (fn) {\n                    if (Medium.activeElement === this.element) {\n                        if (fn) {\n                            fn.apply(this);\n                        }\n                        d.execCommand(this.tagName, false);\n                    }\n                },\n                setClean: function () {\n                    return this;\n                }\n            };\n\n            Medium.Injector.prototype = {\n                /**\n                * @methodOf Medium.Injector\n                * @param {String|HtmlElement} htmlRaw\n                * @param {Boolean} [selectInserted]\n                * @returns {null}\n                */\n                inject: function (htmlRaw, selectInserted) {\n                    this.insertHTML(htmlRaw, selectInserted);\n                    return null;\n                }\n            };\n\n            /**\n            *\n            * @constructor\n            */\n            Medium.Undoable = function () {\n            };\n        }\n\n        //if medium is domesticated (ie, not wild)\n        else {\n            rangy.rangePrototype.insertNodeAtEnd = function (node) {\n                var range = this.cloneRange();\n                range.collapse(false);\n                range.insertNode(node);\n                range.detach();\n                this.setEndAfter(node);\n            };\n\n            Medium.Element.prototype = {\n                /**\n                                 * @methodOf Medium.Element\n                                 * @param {Function} [fn]\n                                 */\n                invoke: function (fn) {\n                    if (Medium.activeElement === this.element) {\n                        if (fn) {\n                            fn.apply(this);\n                        }\n\n                        var\n                        attr = this.attributes,\n                                tagName = this.tagName.toLowerCase(),\n                                applier,\n                                cl;\n\n                        if (attr.className !== undefined) {\n                            cl = (attr.className.split[' '] || [attr.className]).shift();\n                            delete attr.className;\n                        } else {\n                            cl = 'medium-' + tagName;\n                        }\n\n                        applier = rangy.createClassApplier(cl, {\n                            elementTagName: tagName,\n                            elementAttributes: this.attributes\n                        });\n\n                        this.medium.makeUndoable();\n\n                        applier.toggleSelection(w);\n\n                        if (this.clean) {\n                            //cleanup\n                            this.medium.clean();\n                            this.medium.placeholders();\n                        }\n\n\n                    }\n                },\n\n                /**\n                                 *\n                                 * @param {Boolean} clean\n                                 * @returns {Medium.Element}\n                                 */\n                setClean: function (clean) {\n                    this.clean = clean;\n                    return this;\n                }\n            };\n\n            Medium.Injector.prototype = {\n                /**\n                                 * @methodOf Medium.Injector\n                                 * @param {String|HtmlElement} htmlRaw\n                                 * @returns {HtmlElement}\n                                 */\n                inject: function (htmlRaw) {\n                    var html, isConverted = false;\n                    if (typeof htmlRaw === 'string') {\n                        var htmlConverter = d.createElement('div');\n                        htmlConverter.innerHTML = htmlRaw;\n                        html = htmlConverter.childNodes;\n                        isConverted = true;\n                    } else {\n                        html = htmlRaw;\n                    }\n\n                    this.insertHTML('<span id=\"wedge\"></span>');\n\n                    var wedge = d.getElementById('wedge'),\n                            parent = wedge.parentNode,\n                            i = 0;\n                    wedge.removeAttribute('id');\n\n                    if (isConverted) {\n                        while (i < html.length) {\n                            parent.insertBefore(html[i], wedge);\n                        }\n                    } else {\n                        parent.insertBefore(html, wedge);\n                    }\n                    parent.removeChild(wedge);\n                    wedge = null;\n\n                    return html;\n                }\n            };\n\n            /**\n                         * @param {Medium} medium\n                         * @constructor\n                         */\n            Medium.Undoable = function (medium) {\n                var me = this,\n                        element = medium.settings.element,\n                        startValue = element.innerHTML,\n                        timer,\n                        stack = new Undo.Stack(),\n                        EditCommand = Undo.Command.extend({\n                            constructor: function (oldValue, newValue) {\n                                this.oldValue = oldValue;\n                                this.newValue = newValue;\n                            },\n                            execute: function () {\n                            },\n                            undo: function () {\n                                element.innerHTML = this.oldValue;\n                                medium.canUndo = stack.canUndo();\n                                medium.canRedo = stack.canRedo();\n                                medium.dirty = stack.dirty();\n                            },\n                            redo: function () {\n                                element.innerHTML = this.newValue;\n                                medium.canUndo = stack.canUndo();\n                                medium.canRedo = stack.canRedo();\n                                medium.dirty = stack.dirty();\n                            }\n                        }),\n                        makeUndoable = function () {\n                            var newValue = element.innerHTML;\n                            // ignore meta key presses\n                            if (newValue != startValue) {\n\n                                if (!me.movingThroughStack) {\n                                    // this could try and make a diff instead of storing snapshots\n                                    stack.execute(new EditCommand(startValue, newValue));\n                                    startValue = newValue;\n                                    medium.dirty = stack.dirty();\n                                }\n\n                                utils.triggerEvent(medium.settings.element, \"change\");\n                            }\n                        };\n\n                this.medium = medium;\n                this.timer = timer;\n                this.stack = stack;\n                this.makeUndoable = makeUndoable;\n                this.EditCommand = EditCommand;\n                this.movingThroughStack = false;\n\n                utils\n                .addEvent(element, 'keyup', function (e) {\n                    if (e.ctrlKey || e.keyCode === key.z) {\n                        utils.preventDefaultEvent(e);\n                        return;\n                    }\n\n                    // a way too simple algorithm in place of single-character undo\n                    clearTimeout(timer);\n                    timer = setTimeout(function () {\n                        makeUndoable();\n                    }, 250);\n                })\n\n                .addEvent(element, 'keydown', function (e) {\n                    if (!e.ctrlKey || e.keyCode !== key.z) {\n                        me.movingThroughStack = false;\n                        return true;\n                    }\n\n                    utils.preventDefaultEvent(e);\n\n                    me.movingThroughStack = true;\n\n                    if (e.shiftKey) {\n                        stack.canRedo() && stack.redo()\n                    } else {\n                        stack.canUndo() && stack.undo();\n                    }\n                });\n            };\n        }\n\n        //Thank you Tim Down (super uber genius): http://stackoverflow.com/questions/6690752/insert-html-at-caret-in-a-contenteditable-div/6691294#6691294\n        Medium.Injector.prototype.insertHTML = function (html, selectPastedContent) {\n            var selection\n            var range;\n            if (window.getSelection) {\n                // IE9 and non-IE\n                selection = window.getSelection();\n                if (selection.getRangeAt && selection.rangeCount) {\n                    range = selection.getRangeAt(0);\n                    range.deleteContents();\n\n                    // Range.createContextualFragment() would be useful here but is\n                    // only relatively recently standardized and is not supported in\n                    // some browsers (IE9, for one)\n                    var el = document.createElement(\"div\");\n                    el.innerHTML = html;\n                    var frag = document.createDocumentFragment(), node, lastNode;\n                    while ((node = el.firstChild)) {\n                        lastNode = frag.appendChild(node);\n                    }\n                    var firstNode = frag.firstChild;\n                    range.insertNode(frag);\n\n                    // Preserve the selection\n                    if (lastNode) {\n                        range = range.cloneRange();\n                        range.setStartAfter(lastNode);\n                        if (selectPastedContent) {\n                            range.setStartBefore(firstNode);\n                        } else {\n                            range.collapse(true);\n                        }\n                        selection.removeAllRanges();\n                        selection.addRange(range);\n                    }\n                }\n            } else if ((selection = document.selection) && selection.type != \"Control\") {\n                // IE < 9\n                var originalRange = selection.createRange();\n                originalRange.collapse(true);\n                selection.createRange().pasteHTML(html);\n                if (selectPastedContent) {\n                    range = selection.createRange();\n                    range.setEndPoint(\"StartToStart\", originalRange);\n                    range.select();\n                }\n            }\n        };\n\n        Medium.Html.prototype = {\n            /**\n            * @methodOf Medium.Html\n            * @param {Function} [fn]\n            * @param {Boolean} [selectInserted]\n            * @returns {HtmlElement}\n            */\n            insert: function (fn, selectInserted) {\n                if (Medium.activeElement === this.element) {\n                    if (fn) {\n                        fn.apply(this);\n                    }\n\n                    var inserted = this.injector.inject(this.html, selectInserted);\n\n                    if (this.clean) {\n                        //cleanup\n                        this.medium.clean();\n                        this.medium.placeholders();\n                    }\n\n                    this.medium.makeUndoable();\n\n                    return inserted;\n                } else {\n                    return null;\n                }\n            },\n\n            /**\n            * @attributeOf {Medium.Injector} Medium.Html\n            */\n            injector: new Medium.Injector(),\n\n            /**\n            * @methodOf Medium.Html\n            * @param clean\n            * @returns {Medium.Html}\n            */\n            setClean: function (clean) {\n                this.clean = clean;\n                return this;\n            }\n        };\n\n        Medium.Utilities = utils = {\n            /*\n                         * Keyboard Interface events\n                         */\n            isCommand: function (s, e, fnTrue, fnFalse) {\n                if ((s.modifier === 'ctrl' && e.ctrlKey ) ||\n                        (s.modifier === 'cmd' && e.metaKey ) ||\n                        (s.modifier === 'auto' && (e.ctrlKey || e.metaKey) )\n                     ) {\n                    return fnTrue.call();\n                } else {\n                    return fnFalse.call();\n                }\n            },\n            isShift: function (e, fnTrue, fnFalse) {\n                if (e.shiftKey) {\n                    return fnTrue.call();\n                } else {\n                    return fnFalse.call();\n                }\n            },\n            isModifier: function (settings, e, fn) {\n                var cmd = settings.modifiers[e.keyCode];\n                if (cmd) {\n                    return fn.call(null, cmd);\n                }\n                return false;\n            },\n            special: (function () {\n                var special = {};\n\n                special[key['backspace']] = true;\n                special[key['shift']] = true;\n                special[key['ctrl']] = true;\n                special[key['alt']] = true;\n                special[key['delete']] = true;\n                special[key['cmd']] = true;\n\n                return special;\n            })(),\n            isSpecial: function (cacheCmd, e) {\n\n                if (cacheCmd) {\n                    return true;\n                }\n\n                return typeof Medium.Utilities.special[e.keyCode] !== 'undefined';\n            },\n            navigational: (function () {\n                var navigational = {};\n\n                navigational[key['upArrow']] = true;\n                navigational[key['downArrow']] = true;\n                navigational[key['leftArrow']] = true;\n                navigational[key['rightArrow']] = true;\n\n                return navigational;\n            })(),\n            isNavigational: function (e) {\n                return typeof Medium.Utilities.navigational[e.keyCode] !== 'undefined';\n            },\n\n            /**\n                         * @param element\n                         * @param eventNamesString\n                         * @param func\n                         * @returns Medium.Utilities\n                         */\n            addEvents: function(element, eventNamesString, func) {\n                var i = 0,\n                        eventName,\n                        eventNames = eventNamesString.split(' '),\n                        max = eventNames.length,\n                        utils = Medium.Utilities;\n\n                for(;i < max; i++) {\n                    eventName = eventNames[i];\n                    if (eventName.length > 0) {\n                        utils.addEvent(element, eventName, func);\n                    }\n                }\n\n                return Medium.Utilities;\n            },\n            /*\n                         * Handle Events\n                         */\n            addEvent: function addEvent(element, eventName, func) {\n                if (element.addEventListener) {\n                    element.addEventListener(eventName, func, false);\n                } else if (element.attachEvent) {\n                    element.attachEvent(\"on\" + eventName, func);\n                } else {\n                    element['on' + eventName] = func;\n                }\n\n                return Medium.Utilities;\n            },\n            removeEvent: function removeEvent(element, eventName, func) {\n                if (element.removeEventListener) {\n                    element.removeEventListener(eventName, func, false);\n                } else if (element.detachEvent) {\n                    element.detachEvent(\"on\" + eventName, func);\n                } else {\n                    element['on' + eventName] = null;\n                }\n\n                return Medium.Utilities;\n            },\n            preventDefaultEvent: function (e) {\n                if (e.preventDefault) {\n                    e.preventDefault();\n                } else {\n                    e.returnValue = false;\n                }\n\n                return Medium.Utilities;\n            },\n            stopPropagation: function(e) {\n                e = e || window.event;\n                e.cancelBubble = true;\n\n                if (e.stopPropagation !== undefined) {\n                    e.stopPropagation();\n                }\n\n                return Medium.Utilities;\n            },\n            isEventSupported: function (element, eventName) {\n                eventName = 'on' + eventName;\n                var el = d.createElement(element.tagName),\n                        isSupported = (eventName in el);\n\n                if (!isSupported) {\n                    el.setAttribute(eventName, 'return;');\n                    isSupported = typeof el[eventName] == 'function';\n                }\n                el = null;\n                return isSupported;\n            },\n            triggerEvent: function (element, eventName) {\n                var e;\n                if (d.createEvent) {\n                    e = d.createEvent(\"HTMLEvents\");\n                    e.initEvent(eventName, true, true);\n                    e.eventName = eventName;\n                    element.dispatchEvent(e);\n                } else {\n                    e = d.createEventObject();\n                    element.fireEvent(\"on\" + eventName, e);\n                }\n\n                return Medium.Utilities;\n            },\n\n            deepExtend: function (destination, source) {\n                for (var property in source) if (source.hasOwnProperty(property)) {\n                    if (\n                        source[property]\n                        && source[property].constructor\n                        && source[property].constructor === Object\n                    ) {\n                        destination[property] = destination[property] || {};\n                        Medium.Utilities.deepExtend(destination[property], source[property]);\n                    } else {\n                        destination[property] = source[property];\n                    }\n                }\n                return destination;\n            },\n            /*\n                         * This is a Paste Hook. When the user pastes\n                         * content, this ultimately converts it into\n                         * plain text before inserting the data.\n                         */\n            pasteHook: function (medium, fn) {\n                var textarea = d.createElement('textarea'),\n                        el = medium.element,\n                        existingValue,\n                        existingLength,\n                        overallLength,\n                        s = medium.settings,\n                        html = medium.html;\n\n                textarea.className = s.cssClasses.pasteHook;\n\n                el.parentNode.appendChild(textarea);\n\n                textarea.focus();\n\n                if (!wild) {\n                    medium.makeUndoable();\n                }\n                setTimeout(function () {\n                    el.focus();\n                    if (s.maxLength > 0) {\n                        existingValue = utils.text(el);\n                        existingLength = existingValue.length;\n                        overallLength = existingLength + textarea.value.length;\n                        if (overallLength > existingLength) {\n                            textarea.value = textarea.value.substring(0, s.maxLength - existingLength);\n                        }\n                    }\n                    fn(textarea.value);\n                    utils.detachNode( textarea );\n                }, 2);\n\n                return Medium.Utilities;\n            },\n            traverseAll: function(element, options, depth) {\n                var children = element.childNodes,\n                        length = children.length,\n                        i = 0,\n                        node,\n                        depth = depth || 1;\n\n                options = options || {};\n\n                if (length > 0) {\n                    for(;i < length;i++) {\n                        node = children[i];\n                        switch (node.nodeType) {\n                            case 1:\n                                Medium.Utilities.traverseAll(node, options, depth + 1);\n                                if (options.element !== undefined) options.element(node, i, depth, element);\n                                break;\n                            case 3:\n                                if (options.fragment !== undefined) options.fragment(node, i, depth, element);\n                        }\n\n                        //length may change\n                        length = children.length;\n                        //if length did change, and we are at the last item, this causes infinite recursion, so if we are at the last item, then stop to prevent this\n                        if (node === element.lastChild) {\n                            i = length;\n                        }\n                    }\n                }\n                return Medium.Utilities;\n            },\n            trim: function (string) {\n                return string.replace(/^[\\s]+|\\s+$/g, '');\n            },\n            arrayContains: function(array, variable) {\n                var i = array.length;\n                while (i--) {\n                    if (array[i] === variable) {\n                        return true;\n                    }\n                }\n                return false;\n            },\n            addClass: function(el, className) {\n                if (el.classList)\n                    el.classList.add(className);\n                else\n                    el.className += ' ' + className;\n\n                return Medium.Utilities;\n            },\n            removeClass: function(el, className) {\n                if (el.classList)\n                    el.classList.remove(className);\n                else\n                    el.className = el.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n                return Medium.Utilities;\n            },\n            hasClass: function(el, className) {\n                if (el.classList)\n                    return el.classList.contains(className);\n                else\n                    return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);\n            },\n            isHidden: function(el) {\n                return el.offsetWidth === 0 || el.offsetHeight === 0;\n            },\n            isVisible: function(el) {\n                return el.offsetWidth !== 0 || el.offsetHeight !== 0;\n            },\n            encodeHtml: function ( html ) {\n                return d.createElement( 'a' ).appendChild(\n                    d.createTextNode( html ) ).parentNode.innerHTML;\n            },\n            text: function (node, val) {\n                if (val) {\n                    if ((node.textContent) && (typeof (node.textContent) != \"undefined\")) {\n                        node.textContent = val;\n                    } else {\n                        node.innerText = val;\n                    }\n                }\n\n                else if (node.innerText) {\n                    return utils.trim(node.innerText);\n                }\n\n                else if (node.textContent) {\n                    return utils.trim(node.textContent);\n                }\n                //document fragment\n                else if (node.data) {\n                    return utils.trim(node.data);\n                }\n\n                //for good measure\n                return '';\n            },\n            changeTag: function (oldNode, newTag) {\n                var newNode = d.createElement(newTag),\n                        node,\n                        nextNode;\n\n                node = oldNode.firstChild;\n                while (node) {\n                    nextNode = node.nextSibling;\n                    newNode.appendChild(node);\n                    node = nextNode;\n                }\n\n                oldNode.parentNode.insertBefore(newNode, oldNode);\n                oldNode.parentNode.removeChild(oldNode);\n\n                return newNode;\n            },\n            detachNode: function (el) {\n                if (el.parentNode !== null) {\n                    el.parentNode.removeChild(el);\n                }\n                return el;\n            },\n            baseAtCaret: function (medium) {\n                if (!medium.isActive()) return null;\n\n                var sel = w.getSelection ? w.getSelection() : document.selection;\n\n                if (sel.rangeCount) {\n                    var selRange = sel.getRangeAt(0),\n                            container = selRange.endContainer;\n\n                    switch (container.nodeType) {\n                        case 3:\n                            if (container.data && container.data.length != selRange.endOffset) return false;\n                            break;\n                    }\n\n                    return container;\n                }\n\n                return null;\n            },\n            atCaret: function (medium) {\n                var container = this.baseAtCaret(medium) || {},\n                        el = medium.element;\n\n                if (container === false) return null;\n\n                while (container && container.parentNode !== el) {\n                    container = container.parentNode;\n                }\n\n                if (container && container.nodeType == 1) {\n                    return container;\n                }\n\n                return null;\n            },\n            hide: function(el) {\n                el.style.display = 'none';\n            },\n            show: function(el) {\n                el.style.display = '';\n            },\n            hideAnim: function(el) {\n                el.style.opacity = 1;\n            },\n            showAnim: function(el) {\n                el.style.opacity = 0.01;\n                el.style.display = '';\n            }\n        };\n\n        /*\n                 * Handle Selection Logic\n                 */\n        Medium.Selection = function () {\n        };\n        Medium.Selection.prototype = {\n            setBridge: function (bridge) {\n                for (var i in bridge) if (bridge.hasOwnProperty(i)) {\n                    this[i] = bridge[i];\n                }\n            },\n            saveSelection: function () {\n                if (w.getSelection) {\n                    var sel = w.getSelection();\n                    if (sel.rangeCount > 0) {\n                        return sel.getRangeAt(0);\n                    }\n                } else if (d.selection && d.selection.createRange) { // IE\n                    return d.selection.createRange();\n                }\n                return null;\n            },\n\n            restoreSelection: function (range) {\n                if (range) {\n                    if (w.getSelection) {\n                        var sel = w.getSelection();\n                        sel.removeAllRanges();\n                        sel.addRange(range);\n                    } else if (d.selection && range.select) { // IE\n                        range.select();\n                    }\n                }\n            }\n        };\n\n        /*\n                 * Handle Cursor Logic\n                 */\n        Medium.Cursor = function () {\n        };\n        Medium.Cursor.prototype = {\n            setBridge: function (bridge) {\n                for (var i in bridge) if (bridge.hasOwnProperty(i)) {\n                    this[i] = bridge[i];\n                }\n            },\n            set: function (medium, pos, el) {\n                var range,\n                        html = this.html;\n\n                if (d.createRange) {\n                    var selection = w.getSelection(),\n                            lastChild = medium.lastChild(),\n                            length = utils.text(lastChild).length - 1,\n                            toModify = el ? el : lastChild,\n                            theLength = ((typeof pos !== 'undefined') && (pos !== null) ? pos : length);\n\n                    range = d.createRange();\n                    range.setStart(toModify, theLength);\n                    range.collapse(true);\n                    selection.removeAllRanges();\n                    selection.addRange(range);\n                } else {\n                    range = d.body.createTextRange();\n                    range.moveToElementText(el);\n                    range.collapse(false);\n                    range.select();\n                }\n            },\n            parent: function () {\n                var target = null, range;\n\n                if (w.getSelection) {\n                    range = w.getSelection().getRangeAt(0);\n                    target = range.commonAncestorContainer;\n\n                    target = (target.nodeType === 1\n                                        ? target\n                                        : target.parentNode\n                                     );\n                }\n\n                else if (d.selection) {\n                    target = d.selection.createRange().parentElement();\n                }\n\n                if (target.tagName == 'SPAN') {\n                    target = target.parentNode;\n                }\n\n                return target;\n            },\n            caretToBeginning: function (el) {\n                this.set(this, 0, el);\n            },\n            caretToEnd: function (el) {\n                this.set(this, utils.text(el).length, el);\n            }\n        };\n\n        Medium.Toolbar = function(medium, buttons) {\n            var elementCreator = d.createElement('div'),\n                    that = this;\n\n            elementCreator.innerHTML = this.html;\n\n            this.buttons = buttons;\n            this.element = elementCreator.children[0];\n            d.body.appendChild(this.element);\n            this.active = false;\n            this.busy = true;\n\n            utils\n            .addEvents(document, 'mouseup keyup', function(e) {\n                if (Medium.activeElement === medium.element && !that.busy) {\n                    that.goToSelection();\n                }\n            })\n            .addEvent(w, 'scroll', function() {\n                if (that.active) {\n                    that.goToSelection();\n                }\n            });\n        };\n        Medium.Toolbar.prototype = {\n            fixedClass: 'Medium-toolbar-fixed',\n            showClass: 'Medium-toolbar-show',\n            hideClass: 'Medium-toolbar-hide',\n\n            html:\n            '<div class=\"Medium-toolbar\">\\\n<div class=\"Medium-tail-outer\">\\\n<div class=\"Medium-tail-inner\"></div>\\\n</div>\\\n<div id=\"Medium-buttons\"></div>\\\n<table id=\"Medium-options\">\\\n<tbody>\\\n<tr>\\\n</tr>\\\n</tbody>\\\n</table>\\\n</div>',\n\n            goToSelection: function() {\n            var high = this.getHighlighted(),\n            y = high.boundary.top - 5,\n            el = this.element,\n            style = el.style;\n\n            if (w.scrollTop > 0) {\n            utils.addClass(el, this.fixedClass);\n        } else {\n            utils.removeClass(el, this.fixedClass);\n        }\n\n        if (high !== null) {\n            if (high.range.startOffset === high.range.endOffset && !high.text) {\n                utils\n                .removeClass(el, this.showClass)\n                .addClass(el, this.hideClass);\n\n                this.active = false;\n            } else {\n                utils\n                .removeClass(el, this.hideClass)\n                .removeClass(el, this.showClass);\n\n                style.opacity = 0.01;\n                utils.addClass(el, this.showClass);\n                style.opacity = 1;\n                style.top = (y - 65) + \"px\";\n                style.left = (\n                    (\n                        high.boundary.left + (high.boundary.width / 2)\n                    )\n                    - (el.clientWidth / 2)\n                ) + \"px\";\n\n                this.active = true;\n            }\n        }\n    },\n\n                                getHighlighted: function() {\n        var selection = w.getSelection(),\n                range = (selection.anchorNode ? selection.getRangeAt(0) : false);\n\n        if (!range) {\n            return null;\n        }\n\n        return {\n            selection : selection,\n            range : range,\n            text : utils.trim(range.toString()),\n            boundary : range.getBoundingClientRect()\n        };\n    }\n};\n\n Medium.Drag = function(medium) {\n    this.medium = medium;\n\n    var that = this,\n            iconSrc = this.iconSrc.replace(/[{][{]([a-zA-Z]+)[}][}]/g, function(ignore, match) {\n                if (that.hasOwnProperty(match)) {\n                    return that[match];\n                }\n\n                return ignore;\n            }),\n            icon = this.icon = d.createElement('img');\n\n    icon.className = this.buttonClass;\n    icon.setAttribute('contenteditable', 'false');\n    icon.setAttribute('src', iconSrc);\n\n    this.hide();\n    this.element = null;\n    this.protectedElement = null;\n\n    utils\n    .addEvent(icon, 'dragstart', function(e) {\n        if (that.protectedElement !== null) return;\n\n        e = e || w.event;\n\n        that.protectedElement = utils.detachNode(that.element);\n\n        that.icon.style.opacity = 0.00;\n    })\n    .addEvent(icon, 'mouseover', function(e) {\n        if (that.protectedElement !== null) return;\n\n        utils\n        .stopPropagation(e)\n        .addClass(that.element, that.elementClass);\n\n    })\n    .addEvent(icon, 'mouseout', function(e) {\n        if (that.protectedElement !== null) return;\n\n        utils\n        .stopPropagation(e)\n        .removeClass(that.element, that.elementClass);\n\n    })\n    .addEvent(icon, 'dragend', d.body.ondragend = function(e) {\n        if (that.protectedElement === null) return;\n\n        setTimeout(function() {\n            that.cleanCanvas();\n            that.protectedElement = null;\n        }, 1);\n    });\n};\nMedium.Drag.prototype = {\n    elementClass: 'Medium-focused',\n    buttonClass: 'Medium-drag',\n\n    //thank you ascii for not including a directional icon (boo!)\n    //http://www.flaticon.com/free-icon/pointer-crosstree_10119\n    iconSrc: 'data:image/svg+xml;utf8,\\\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"21.424px\" height=\"21.424px\" viewBox=\"0 0 21.424 21.424\" style=\"enable-background:new 0 0 21.424 21.424;\" xml:space=\"preserve\">\\\n<g>\\\n<g>\\\n<path style=\"fill:{{iconColor}};\" d=\"M13.616,17.709L13.616,17.709h0.781l-3.686,3.715l-3.685-3.715h0.781l0,0H13.616z M13.616,17.709 M14.007,17.709 M12.555,19.566 M8.87,19.566 M7.418,17.709 M7.809,17.709 M10.712,17.709\"/>\\\n<path style=\"fill:{{iconColor}};\" d=\"M13.616,3.715L13.616,3.715h0.781L10.712,0L7.027,3.715h0.781l0,0H13.616z M13.616,3.715 M14.007,3.715 M12.555,1.858 M8.87,1.858 M7.418,3.715 M7.809,3.715 M10.712,3.715\"/>\\\n<path style=\"fill:{{iconColor}};\" d=\"M3.716,13.616L3.716,13.616v0.781L0,10.712l3.716-3.685v0.781l0,0V13.616z M3.716,13.616 M3.716,14.007 M1.858,12.555 M1.858,8.87 M3.716,7.417 M3.716,7.808 M3.716,10.712\"/>\\\n<path style=\"fill:{{iconColor}};\" d=\"M17.709,13.616L17.709,13.616v0.781l3.715-3.685l-3.715-3.685v0.781l0,0V13.616z M17.709,13.616 M17.709,14.007 M19.566,12.555 M19.566,8.87 M17.709,7.417 M17.709,7.808 M17.709,10.712\"/>\\\n</g>\\\n<path style=\"fill-rule:evenodd;clip-rule:evenodd;fill:{{iconColor}};\" d=\"M10.712,6.608c2.267,0,4.104,1.838,4.104,4.104 c0,2.266-1.837,4.104-4.104,4.104c-2.266,0-4.104-1.837-4.104-4.104C6.608,8.446,8.446,6.608,10.712,6.608L10.712,6.608z M10.712,7.515c-1.765,0-3.196,1.432-3.196,3.197s1.432,3.197,3.196,3.197c1.766,0,3.197-1.432,3.197-3.197 S12.478,7.515,10.712,7.515z\"/>\\\n</g>\\\n</svg>',\n    iconColor: '#231F20',\n    hide: function() {\n    utils.hide(this.icon);\n},\n\n    show: function(el) {\n        if (el === this.icon && this.protectedElement === null) return;\n\n        this.element = el;\n\n        var style = this.icon.style,\n                left = el.offsetLeft,\n                top = el.offsetTop;\n\n        el.dragIcon = this.icon;\n        el.parentNode.appendChild(this.icon);\n\n        style.opacity = 1;\n        style.left = left + 'px';\n        style.top = top + 'px';\n\n        utils.show(this.icon);\n    },\n        cleanCanvas: function() {\n            var target,\n                    inserted = false,\n                    buttons = d.getElementsByClassName(this.buttonClass);\n\n            this.icon.style.opacity = 1;\n\n            while (buttons.length > 0) {\n                if (utils.isVisible(target = buttons[0])) {\n                    if (!inserted) {\n                        target.parentNode.insertBefore(this.element, target);\n                        inserted = true;\n                    }\n                    utils.detachNode(target);\n                }\n            }\n            utils.detachNode(this.icon);\n        }\n};\n\nMedium.Action = function () {\n};\nMedium.Action.prototype = {\n    setBridge: function (bridge) {\n        for (var i in bridge) if (bridge.hasOwnProperty(i)) {\n            this[i] = bridge[i];\n        }\n    },\n    listen: function () {\n        var el = this.element,\n                intercept = this.intercept;\n\n        utils\n        .addEvent(el, 'keyup', intercept.up)\n        .addEvent(el, 'keydown', intercept.down)\n        .addEvent(el, 'focus', intercept.focus)\n        .addEvent(el, 'blur', intercept.blur)\n        .addEvent(el, 'paste', this.settings.pasteEventHandler);\n    },\n    preserveElementFocus: function () {\n        // Fetch node that has focus\n        var anchorNode = w.getSelection ? w.getSelection().anchorNode : d.activeElement;\n        if (anchorNode) {\n            var cache = this.medium.cache,\n                    s = this.settings,\n                    cur = anchorNode.parentNode,\n                    children = s.element.children,\n                    diff = cur !== cache.focusedElement,\n                    elementIndex = 0,\n                    i;\n\n            // anchorNode is our target if element is empty\n            if (cur === s.element) {\n                cur = anchorNode;\n            }\n\n            // Find our child index\n            for (i = 0; i < children.length; i++) {\n                if (cur === children[i]) {\n                    elementIndex = i;\n                    break;\n                }\n            }\n\n            // Focused element is different\n            if (diff) {\n                cache.focusedElement = cur;\n                cache.focusedElementIndex = elementIndex;\n            }\n        }\n    }\n};\n\nMedium.Cache = function () {\n    this.initialized = false;\n    this.cmd = false;\n    this.focusedElement = null\n};\nMedium.Cache.prototype = {\n    setBridge: function (bridge) {\n        for (var i in bridge) if (bridge.hasOwnProperty(i)) {\n            this[i] = bridge[i];\n        }\n    }\n};\n\n//Modes\nMedium.inlineMode = 'inline';\nMedium.partialMode = 'partial';\nMedium.richMode = 'rich';\nMedium.inlineRichMode = 'inlineRich';\nMedium.Messages = {\n    pastHere: 'Paste Here'\n};\n\n//Behaviours\nMedium.domesticatedBehavior = 'domesticated';\nMedium.wildBehavior = 'wild';\n\nreturn Medium;\n}());\n\nif (typeof define === 'function' && define['amd']) {\n    define(function () { return Medium; });\n} else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Medium;\n} else if (typeof this !== 'undefined') {\n    this.Medium = Medium;\n}\n\n}).call(this, window, document);",
			"settings":
			{
				"buffer_size": 81314,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 368.0,
		"selected_items":
		[
			[
				"js",
				"Set Syntax: JavaScript"
			],
			[
				"ascii",
				"ASCII Decorator: Font Selector"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"syntax",
				"Set Syntax: PHP"
			],
			[
				"java",
				"Set Syntax: Java"
			],
			[
				"SYC",
				"Set Syntax: C"
			],
			[
				"PASCAL",
				"Set Syntax: Pascal"
			],
			[
				"JSA",
				"Set Syntax: JavaScript"
			],
			[
				"snicl",
				"Snippet: console-log"
			],
			[
				"sncl",
				"Snippet: console-log"
			],
			[
				"snippetcl",
				"Snippet: console-log"
			],
			[
				"node",
				"SublimeREPL: Node"
			],
			[
				"git commit",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add..."
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"add",
				"Git: Add..."
			],
			[
				"gita d",
				"Git: Add..."
			],
			[
				"gitcom",
				"Git: Commit"
			],
			[
				"gitcm",
				"Set Syntax: Git Commit Message"
			],
			[
				"git ad",
				"Git: Add..."
			],
			[
				"git stats",
				"Git: Status"
			],
			[
				"gitc",
				"Git: Commit"
			],
			[
				"gc",
				"Git: Commit"
			],
			[
				"com",
				"Git: Commit"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"status",
				"Git: Status"
			],
			[
				"gitstatus",
				"Git: Status"
			],
			[
				"stats",
				"Git: Status"
			],
			[
				"gitstat",
				"Git: Status"
			],
			[
				"gitad",
				"Git: Add..."
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"py",
				"Set Syntax: Python"
			],
			[
				"python",
				"SublimeREPL: Python"
			],
			[
				"markdown",
				"Set Syntax: Markdown"
			],
			[
				"jas",
				"Set Syntax: JavaScript"
			],
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"hl",
				"BracketHighlighter: Jump to Left Bracket"
			],
			[
				"replph",
				"SublimeREPL: PHP"
			],
			[
				"php",
				"Set Syntax: PHP"
			],
			[
				"git comm	",
				"Git: Commit"
			],
			[
				"gita",
				"Git: Add..."
			],
			[
				"git statu",
				"Git: Status"
			],
			[
				"repp",
				"SublimeREPL: Python"
			],
			[
				"change",
				"Git: Change Branch"
			],
			[
				"chanb",
				"Git: Change Branch"
			],
			[
				"git branch",
				"Git: Change Branch"
			],
			[
				"git checkout",
				"Git: Checkout Tag"
			],
			[
				"git reset",
				"Git: Reset (hard) HEAD"
			],
			[
				"git comit",
				"Git: Commit"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git commt",
				"Git: Commit"
			],
			[
				"git stt",
				"Git: Status"
			],
			[
				"refresh",
				"Project: Refresh Folders"
			],
			[
				"levels",
				"Levels: Update"
			],
			[
				"lisp",
				"Package Control: List Packages"
			],
			[
				"packages",
				"Package Control: List Packages"
			],
			[
				"gicomm",
				"Git: Commit"
			],
			[
				"scope",
				"Scope Hunter: Toggle Instant Scoper"
			],
			[
				"format",
				"Format: Javascript"
			],
			[
				"forj",
				"Format: Javascript"
			],
			[
				"git  status",
				"Git: Status"
			],
			[
				"wrapwith",
				"Snippet: wrap-with-braces"
			],
			[
				"wrapwithf",
				"Snippet: wrap-with-function"
			],
			[
				"emmet",
				"Emmet: Evaluate Math Expression"
			],
			[
				"compare",
				"GitGutter: Compare Against Branch"
			],
			[
				"diff",
				"Git: Diff Staged Files (Ignore Whitespace)"
			],
			[
				"branch",
				"Git: Change Branch"
			],
			[
				"git diff",
				"Git: Diff All Files"
			],
			[
				"shutis",
				"Scope Hunter: Toggle Instant Scoper"
			],
			[
				"shutn",
				"Scope Hunter: Toggle Instant Scoper"
			],
			[
				"shu",
				"Scope Hunter: Show Scope Under Cursor(s)"
			],
			[
				"shunt",
				"Scope Hunter: Toggle Instant Scoper"
			],
			[
				"scoph",
				"Scope Hunter: Toggle Instant Scoper"
			],
			[
				"prv",
				"PackageResourceViewer: Open Resource"
			],
			[
				"packrev",
				"PackageResourceViewer: Extract Package"
			],
			[
				"scop",
				"Scope Hunter: Toggle Instant Scoper"
			],
			[
				"git cb",
				"Git: Change Branch"
			],
			[
				"git bran",
				"Git: Change Branch"
			],
			[
				"refhr",
				"Project: Refresh Folders"
			],
			[
				"edit",
				"SnippetMaker: Edit Snippet"
			],
			[
				"snippet",
				"SnippetMaker: Make Snippet"
			],
			[
				"edisn",
				"SnippetMaker: Edit Snippet"
			],
			[
				"snipp",
				"SnippetMaker: Edit Snippet"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"snippetmaker",
				"SnippetMaker: Make Snippet"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"user",
				"Preferences: Settings - User"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"wrap",
				"Emmet: Wrap With Abbreviation"
			],
			[
				"git graph",
				"Git: Graph All"
			],
			[
				"git",
				"Git: Log All"
			],
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"save",
				"Project: Save As"
			],
			[
				"proje",
				"Project: Refresh Folders"
			],
			[
				"todo",
				"TodoReview: Project Files"
			],
			[
				"paclist",
				"Package Control: List Packages"
			],
			[
				"project",
				"Project: Save As"
			],
			[
				"git ocmm",
				"Git: Commit"
			],
			[
				"git staut",
				"Git: Status"
			],
			[
				"coff",
				"Set Syntax: CoffeeScript"
			],
			[
				"git commi",
				"Git: Commit"
			],
			[
				"packlist",
				"Package Control: List Packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"gcomm",
				"Git: Commit"
			],
			[
				"commit",
				"Git: Commit"
			],
			[
				"comi",
				"Git: Commit"
			],
			[
				"less",
				"Set Syntax: LESS"
			],
			[
				"gitadd",
				"Git: Add..."
			],
			[
				"javas",
				"Set Syntax: JavaScript"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"puy",
				"Preferences: Key Bindings - User"
			],
			[
				"keybin",
				"Preferences: Key Bindings - User"
			],
			[
				"move",
				"MoveText: Move Right"
			],
			[
				"default",
				"Preferences: Key Bindings - Default"
			],
			[
				"line",
				"Sort Lines"
			],
			[
				"pref",
				"Preferences: Settings - User"
			],
			[
				"lower",
				"Convert Case: Lower Case"
			],
			[
				"git ",
				"Git: Graph All"
			],
			[
				"git comi",
				"Git: Commit"
			],
			[
				"preferences",
				"Preferences: Settings - User"
			],
			[
				"pack",
				"Package Control: Remove Package"
			],
			[
				"emmet eva",
				"Emmet: Evaluate Math Expression"
			],
			[
				"handle",
				"Set Syntax: Handlebars"
			],
			[
				"css",
				"Set Syntax: CSS"
			]
		],
		"width": 496.0
	},
	"console":
	{
		"height": 538.0,
		"history":
		[
			"print(view.scope_name(view.sel().begin()))",
			"print(view.scope_name(view.sel()))",
			"print(view.scope_name(view.sel()[0].begin()))",
			"sublime.CLASS_WORD_START",
			"dir(sublime)",
			"sublime.active_window().active_view().run_command(\"scope_font_lock\")",
			"sublime.active_window().active_view()",
			"sublime.active_window().active_view().run_command(\"scope_font_lock\")",
			"sublime.active_window().active_view()",
			"sublime.active_window()",
			"sublime.active_view()",
			"sublime.run_command(\"scope_font_lock\")",
			"sublime.run_command(\"ScopeFontLock\")",
			"sublime.run_command(\"lafjksd\")",
			"sublime.run_command(\"scope_font_lock\")",
			"dir(sublime)",
			"sublime.command",
			"sublime",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Combocoputer/Documents/martijnbrekelmans",
		"/C/Users/Combocoputer/Documents/martijnbrekelmans/lines",
		"/C/Users/Combocoputer/Documents/martijnbrekelmans/trees"
	],
	"file_history":
	[
		"/C/Users/Combocoputer/Documents/leerlingen/src/page.js",
		"/C/Users/Combocoputer/Documents/leerlingen/style.css",
		"/C/Users/Combocoputer/Documents/leerlingen/build/.module-cache/c0eb774f4efc48117a198f796dba354811477ce3.js",
		"/C/Users/Combocoputer/Documents/leerlingen/index.html",
		"/C/Users/Combocoputer/Documents/leerlingen/leerlingen.sublime-workspace",
		"/C/Users/Combocoputer/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/home/mb/Documents/web/schoolopdracht Jos leerlingen/style.css",
		"/home/mb/.config/sublime-text-3/Packages/User/snippets/console-log.sublime-snippet",
		"/home/mb/Documents/web/schoolopdracht Jos leerlingen/.gitignore",
		"/home/mb/Documents/web/schoolopdracht Jos leerlingen/index.html",
		"/home/mb/Documents/web/schoolopdracht Jos leerlingen/leerlingen.json",
		"/home/mb/Downloads/jsonpath-0.8.0.js.txt",
		"/home/mb/.mozilla/firefox/qbo22y7s.default/scriptish_scripts/scrollyid/scrollyid.user.js",
		"/home/mb/Documents/web/schoolopdracht Jos leerlingen/build/bacon.js",
		"/home/mb/Documents/web/schoolopdracht Jos leerlingen/build/rx.lite.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/board/manageBoards.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/editor/editor.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/README.md",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/navigation/boardNavigation.less",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/styles/notes.less",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/styles/note.less",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/routes.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/styles/variables.less",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/styles/style.less",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/styles/autoform.less",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/tags/tag.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/note/note.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/navigation/boardNavigation.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/navigation/boardNavigation.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/brainstorm.sublime-workspace",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/lib/collections.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/mup.json",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/notes/notes.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/note/note.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/previewNote/previewNote.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/board/board.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/globalHelpers.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/notes/notes.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/previewNote/previewNote.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/board/board.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/client.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/shareNote/shareNote.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/shareNote/shareNote.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/server/startup.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/board/manageBoards.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/.meteor/versions",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/container.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/.meteor/packages",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/empty.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/.gitignore",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/brainstorm.sublime-project",
		"/home/mb/Downloads/Wizards&Warriors-TitleTheme.mid",
		"/home/mb/Documents/web/meteor/meteor-applications/blagh/.meteor/packages",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/board/boardNavigation.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/board/boardNavigation.js",
		"/home/mb/.mozilla/firefox/qbo22y7s.default/scriptish_scripts/postchain/postchain.user.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/server/allowdeny.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/board/boardNavigation.less",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/home.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/editor/editor.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/styles/animation.css",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/server/pubsub.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/tags/tag.html",
		"/home/mb/.config/sublime-text-3/Packages/User/Markdown.sublime-settings",
		"/home/mb/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/mb/.config/sublime-text-3/Packages/User/macros/insert-semicolon.sublime-macro",
		"/home/mb/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/mb/.config/sublime-text-3/Packages/User/snippets/ifn.sublime-snippet",
		"/home/mb/.config/sublime-text-3/Packages/User/snippets/fn.sublime-snippet",
		"/home/mb/.config/sublime-text-3/Packages/User/snippets/objectfunction.sublime-snippet",
		"/home/mb/Documents/web/meteor/meteor-packages/meteor-marked/README.md",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/packages/marked/package.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/packages/marked/template-integration.js",
		"/home/mb/.config/sublime-text-3/Packages/User/snippets/that.sublime-snippet",
		"/home/mb/Documents/web/meteor/meteor-packages/meteor-marked/package.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/lib/vendor/highlightjs/highlight.pack.js",
		"/home/mb/Documents/web/meteor/meteor-packages/meteor-marked/template-integration.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/packages/meteor-marked/README.md",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/packages/meteor-marked/package.json",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/packages/marked/versions.json",
		"/home/mb/Documents/web/meteor/meteor-packages/meteor-marked/highlightjs/highlight.pack.js",
		"/home/mb/.config/sublime-text-3/Packages/User/ifn.sublime-snippet",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/newNote/editor.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/newNote/editor.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/styles/noteContainer.less",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/.meteor/local/build/programs/server/packages/iron_router.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/newNote/newNote.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm-clone/client/note/note.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/startup.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/newNote/newNote.html",
		"/home/mb/Documents/web/meteor/meteor-packages/meteor-marked/versions.json",
		"/home/mb/Documents/web/meteor/meteor-packages/meteor-marked/.gitmodules",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/plannificater.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/tag.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/routes.js",
		"/home/mb/.config/sublime-text-3/Packages/User/font-lock/font-lock.sublime-settings",
		"/home/mb/.config/sublime-text-3/Packages/User/font-lock/javascriptFontlock.tmLanguage",
		"/home/mb/.config/sublime-text-3/Packages/User/font-lock.py",
		"/home/mb/.config/sublime-text-3/Packages/User/font-lock/font-lock.py",
		"/home/mb/.config/sublime-text-3/Packages/User/font-lock/Default.sublime-commands",
		"/home/mb/.config/sublime-text-3/Packages/User/font-lock/fontLock.tmLanguage",
		"/home/mb/.config/sublime-text-3/Packages/User/font-lock/javascript-fontlock.tmLanguage",
		"/home/mb/.config/sublime-text-3/Packages/JavaScript/JavaScript.tmLanguage",
		"/opt/sublime_text/Packages/JavaScript.sublime-package",
		"/home/mb/.config/sublime-text-3/Packages/User/Base File.sublime-settings",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/widgets/dataMethods.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/widgets/note/note.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/widgets/newNote/newNote.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/widgets/lib/widgetManager.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/container/container.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/widgets/baseWidget/baseWidget.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/widgets/baseWidget/baseWidget.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/widgets/note/note-bottom.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/util.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/widgets/note/note-top.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/lib/nestedArguments.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/widgets/newNote/newNote-middle.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/container/container.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/widgets/note/note-middle.html",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/lib/collections/Tags.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/lib/collections/Display.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/lib/collections/Notes.js",
		"/home/mb/Documents/web/meteor/meteor-packages/nestedTemplateHelpers/package.js",
		"/home/mb/Documents/web/meteor/meteor-packages/friends/package.js",
		"/home/mb/.config/sublime-text-3/Packages/User/fn.sublime-snippet",
		"/home/mb/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/views/widgets/widgetManager.js",
		"/home/mb/Documents/web/meteor/meteor-applications/brainstorm/client/widgets/widgetManager.js"
	],
	"find":
	{
		"height": 55.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"",
			"*.js",
			"",
			"newNote.html",
			"",
			"*/views/*",
			"/views/*",
			"/views",
			"",
			"*.less",
			".less",
			"*",
			"js/*",
			"*",
			"LendLib.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"menuButtonXP",
			"currentForm",
			"menuTabs",
			"setFormIte",
			"setFormItme",
			"getForm",
			"setFormItems",
			",",
			"makeInfo",
			"stringHeightInPixels + marginList",
			"prototype",
			"HTML",
			"insertHTML",
			"prototype.insertHTML",
			"d",
			"w",
			"range",
			"sel",
			"Sel",
			"sel",
			"Sel",
			"sel",
			"insertHTML",
			"insert",
			"Medium.Html",
			"Html",
			",",
			"  ",
			",",
			"true",
			"recording",
			"log",
			"urrentRecording = record[index]",
			"flatlan",
			"Niemand",
			"Helemaal",
			"voornaam",
			"Statistiek",
			"!\");",
			"email",
			",",
			"leraar",
			",",
			"}\n",
			"this.state.filter",
			"console",
			"div",
			"onMouseEnter",
			"data",
			"newTextRange",
			"offsetNode",
			"new",
			"height",
			"relative",
			"position",
			"490",
			"500",
			"position",
			"html",
			"750",
			"body",
			"document",
			"console",
			"leerling",
			"leerlingen",
			"v",
			"log",
			"this",
			"text",
			"leerlingen",
			"nieuwLeerlingForm",
			"niew",
			"NiewLeerlingForm",
			"quippet",
			"220",
			",",
			".preview",
			"_.",
			"233",
			"208",
			"40px",
			"40",
			"ul",
			"bottomNote",
			"16px",
			"16",
			"4",
			"hidden",
			"+",
			"path",
			"board",
			"Session.set",
			"board_id",
			"input",
			"startup",
			"getCurrentBoardname",
			"boardId",
			"if",
			"if (",
			"getPage",
			"_.",
			"startup",
			"head",
			"will not be removed",
			"setCurrentBoardName",
			"getCurrentBoardId",
			"getBoardId",
			"]]",
			"data",
			"d",
			", ",
			">>>",
			"\n",
			",",
			"amountOfPeople",
			"hl",
			"hljs",
			"url",
			"boardNav",
			"boardN",
			"boardNavigation",
			"getCurrentBoardname",
			"selected-",
			"b",
			"a",
			"resto\": 45081586",
			"resto\": 0",
			"\n            "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"  ",
			"\\t",
			"eventOrganizerPanel",
			"formatDate",
			"jump_to_interactive",
			"},\n",
			"regex_contains",
			"'"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 528,
						"regions":
						{
						},
						"selection":
						[
							[
								434,
								434
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/Combocoputer/Documents/martijnbrekelmans/trees/trees.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6957,
						"regions":
						{
						},
						"selection":
						[
							[
								5431,
								5431
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 4845.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2331,
						"regions":
						{
						},
						"selection":
						[
							[
								1437,
								1437
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/Combocoputer/Desktop/rangy.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 81399,
						"regions":
						{
						},
						"selection":
						[
							[
								151,
								151
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "/*",
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Users/Combocoputer/Documents/martijnbrekelmans/lines/style.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 214,
						"regions":
						{
						},
						"selection":
						[
							[
								3,
								3
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/CSS/CSS.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/Combocoputer/Downloads/ProjDom.4dg",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6668,
						"regions":
						{
						},
						"selection":
						[
							[
								1008,
								1008
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2422.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5378,
						"regions":
						{
						},
						"selection":
						[
							[
								2975,
								2975
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2432.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/C/Users/Combocoputer/Documents/javascript/natural editor/editor.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7211,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 4303.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 81314,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								81314
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "",
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 25195.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.figlet_preview":
	{
		"height": 226.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 122.0
	},
	"output.package_dev":
	{
		"height": 122.0
	},
	"output.scope_viewer":
	{
		"height": 122.0
	},
	"output.sftp":
	{
		"height": 116.0
	},
	"project": "leerlingen.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"css",
				"style.css"
			],
			[
				"readm",
				"README.md"
			],
			[
				"less",
				"client/navigation/boardNavigation.less"
			],
			[
				".less",
				"client/styles/notes.less"
			],
			[
				"tag.js",
				"client/tags/tag.js"
			],
			[
				"note.h",
				"client/note/note.html"
			],
			[
				"editor",
				"client/editor/editor.js"
			],
			[
				"conta",
				"client/views/container.html"
			],
			[
				"notes.js",
				"client/notes/notes.js"
			],
			[
				"allow",
				"server/allowdeny.js"
			],
			[
				"colle",
				"lib/collections.js"
			],
			[
				"autof",
				"client/styles/autoform.less"
			],
			[
				"shar",
				"client/shareNote/shareNote.html"
			],
			[
				"boarj",
				"client/board/board.js"
			],
			[
				"editorjs",
				"client/editor/editor.js"
			],
			[
				"note.html",
				"client/note/note.html"
			],
			[
				"routes",
				"client/routes.js"
			],
			[
				"noless",
				"client/styles/note.less"
			],
			[
				"notes.h",
				"client/notes/notes.html"
			],
			[
				"rouje",
				"client/routes.js"
			],
			[
				"notesjs",
				"client/notes/notes.js"
			],
			[
				"nojs",
				"client/note/note.js"
			],
			[
				"prjs",
				"client/previewNote/previewNote.js"
			],
			[
				"previ",
				"client/previewNote/previewNote.html"
			],
			[
				"editjs",
				"client/editor/editor.js"
			],
			[
				"tagjs",
				"client/tags/tag.js"
			],
			[
				"prevjs",
				"brainstorm/client/previewNote/previewNote.js"
			],
			[
				"readme",
				"README.md"
			],
			[
				"contain",
				"client/views/container.html"
			],
			[
				"clientjs",
				"client/client.js"
			],
			[
				"wim",
				"client/views/widgets/lib/widgetManager.js"
			],
			[
				"wid",
				"client/views/widgets/lib/widgetManager.js"
			],
			[
				"container",
				"client/views/container/container.html"
			],
			[
				"conjs",
				"client/views/container/container.js"
			],
			[
				"disp",
				"lib/collections/Display.js"
			],
			[
				"wijs",
				"client/views/widgets/lib/widgetManager.js"
			],
			[
				"users",
				"lib/Users.js"
			],
			[
				"glo",
				"client/globalHelpers.js"
			],
			[
				"friehtml",
				"client/views/friends.html"
			],
			[
				"vari",
				"client/styles/variables.less"
			],
			[
				"friles",
				"client/styles/friend.less"
			],
			[
				"styles",
				"client/styles/style.less"
			],
			[
				"frienhm",
				"client/views/components/friend.html"
			],
			[
				"fril",
				"client/styles/friend.less"
			],
			[
				"secuir",
				"server/security.js"
			],
			[
				"publi",
				"server/publications.js"
			],
			[
				"frhm",
				"client/views/friends.html"
			],
			[
				".sublime",
				"client/views/photoevetns.sublime-project"
			],
			[
				"frien.js",
				"client/controllers/friends.js"
			],
			[
				"varia",
				"client/styles/variables.less"
			],
			[
				"firhl",
				"client/views/friends.html"
			],
			[
				"fhtml",
				"client/views/friends.html"
			],
			[
				"globa",
				"client/globalHelpers.js"
			],
			[
				"evts",
				"client/views/evts.html"
			],
			[
				"eventor",
				"client/views/components/event-organizer.html"
			],
			[
				"lar",
				"/media/mb/F266-5162/lars.html"
			],
			[
				"sideh",
				"client/views/sidebarLeft.html"
			],
			[
				"project",
				"client/views/photoevetns.sublime-project"
			],
			[
				"vless",
				"client/styles/variables.less"
			],
			[
				"style.css",
				"client/styles/theme.css"
			],
			[
				"route",
				"client/routes.js"
			],
			[
				".css",
				"client/styles/theme.css"
			],
			[
				"coll",
				"lib/collections.js"
			],
			[
				"helpers",
				"client/globalHelpers.js"
			],
			[
				"helprs",
				"client/globalHelpers.js"
			],
			[
				"hom",
				"client/views/home.html"
			],
			[
				"head",
				"client/views/common/header.html"
			],
			[
				"impo",
				"import sublime"
			],
			[
				"client",
				"client/client.js"
			],
			[
				"set",
				"client/views/settings.html"
			],
			[
				"login",
				"client/views/login.html"
			],
			[
				"serv",
				"server/server.js"
			],
			[
				"rout",
				"client/routes.js"
			],
			[
				"verif",
				"server/server-templates/verifyEmail.handlebars"
			],
			[
				"clijs",
				"client/client.js"
			],
			[
				"register",
				"client/views/register.html"
			],
			[
				"se",
				"server/server.js"
			],
			[
				"rese",
				"client/views/resetPassword.html"
			],
			[
				"resp",
				"client/views/resetPassword.html"
			],
			[
				"regi",
				"client/views/register.html"
			],
			[
				"home",
				"client/views/home.html"
			],
			[
				".html",
				".meteor/local/build/programs/client/head.html"
			],
			[
				"len",
				"LendLib.html"
			],
			[
				"lh",
				".meteor/local/build/programs/ctl/node_modules/http-proxy/test/lib-http-proxy-test.js"
			],
			[
				"todhml",
				"client/todos.html"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"mar",
				"C:\\Users\\Combocoputer\\Documents\\martijnbrekelmans.sublime-workspace"
			],
			[
				"nature",
				"~/Documents/web/javascript/nature of code/lib/martijnbrekelmans.sublime-project"
			],
			[
				"",
				"~/Documents/blisp/blisp.sublime-project"
			],
			[
				"martijn",
				"~/Documents/web/javascript/nature of code/lib/martijnbrekelmans.sublime-project"
			],
			[
				"marti",
				"~/Documents/web/javascript/nature of code/lib/martijnbrekelmans.sublime-project"
			],
			[
				"leerlin",
				"~/Documents/web/schoolopdracht Jos leerlingen/leerlingen.sublime-workspace"
			],
			[
				"natur",
				"~/Documents/web/javascript/nature of code/lib/martijnbrekelmans.sublime-project"
			],
			[
				"martij",
				"~/Documents/web/javascript/nature of code/lib/martijnbrekelmans.sublime-project"
			],
			[
				"brainstorm",
				"~/Documents/web/meteor/meteor-applications/brainstorm/brainstorm.sublime-project"
			],
			[
				"c",
				"~/Documents/C-programmeren/C-programmeren.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 208.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
